curl(1)                           Curl Manual                          curl(1)

[1mNAME[0m
       curl - transfer a URL

[1mSYNOPSIS[0m
       [1mcurl [options] [4m[22m[URL...][0m

[1mDESCRIPTION[0m
       [1mcurl  [22mis  a tool to transfer data from or to a server, using one of the
       supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS,  IMAP,
       IMAPS,  LDAP,  LDAPS,  POP3,  POP3S,  RTMP, RTSP, SCP, SFTP, SMB, SMBS,
       SMTP, SMTPS, TELNET and TFTP). The command is designed to work  without
       user interaction.

       curl offers a busload of useful tricks like proxy support, user authen‚Äê
       tication, FTP upload, HTTP post, SSL connections, cookies, file  trans‚Äê
       fer  resume,  Metalink,  and more. As you will see below, the number of
       features will make your head spin!

       curl is powered by  libcurl  for  all  transfer-related  features.  See
       [4mlibcurl(3)[24m for details.

[1mURL[0m
       The  URL  syntax is protocol-dependent. You'll find a detailed descrip‚Äê
       tion in RFC 3986.

       You can specify multiple URLs or parts of URLs  by  writing  part  sets
       within braces as in:

         http://site.{one,two,three}.com

       or you can get sequences of alphanumeric series by using [] as in:

         ftp://ftp.example.com/file[1-100].txt

         ftp://ftp.example.com/file[001-100].txt    (with leading zeros)

         ftp://ftp.example.com/file[a-z].txt

       Nested  sequences  are not supported, but you can use several ones next
       to each other:

         http://example.com/archive[1996-1999]/vol[1-4]/part{a,b,c}.html

       You can specify any amount of URLs on the command line.  They  will  be
       fetched in a sequential manner in the specified order.

       You  can  specify a step counter for the ranges to get every Nth number
       or letter:

         http://example.com/file[1-100:10].txt

         http://example.com/file[a-z:2].txt

       When using [] or {} sequences when invoked from a command line  prompt,
       you probably have to put the full URL within double quotes to avoid the
       shell from interfering with it. This also  goes  for  other  characters
       treated special, like for example '&', '?' and '*'.

       Provide  the IPv6 zone index in the URL with an escaped percentage sign
       and the interface name. Like in

         http://[fe80::3%25eth0]/

       If you specify URL without protocol:// prefix,  curl  will  attempt  to
       guess  what  protocol  you might want. It will then default to HTTP but
       try other protocols based on often-used host name prefixes.  For  exam‚Äê
       ple,  for  host names starting with "ftp." curl will assume you want to
       speak FTP.

       curl will do its best to use what you pass to it as a URL.  It  is  not
       trying  to  validate it as a syntactically correct URL by any means but
       is instead [1mvery [22mliberal with what it accepts.

       curl will attempt to re-use connections for multiple file transfers, so
       that  getting many files from the same server will not do multiple con‚Äê
       nects / handshakes. This improves speed. Of course this is only done on
       files  specified  on  a  single command line and cannot be used between
       separate curl invokes.

[1mPROGRESS METER[0m
       curl normally displays a progress meter during  operations,  indicating
       the  amount  of  transferred  data,  transfer speeds and estimated time
       left, etc. The progress meter displays number of bytes and  the  speeds
       are  in  bytes per second. The suffixes (k, M, G, T, P) are 1024 based.
       For example 1k is 1024 bytes. 1M is 1048576 bytes.

       curl displays this data to the terminal by default, so  if  you  invoke
       curl  to do an operation and it is about to write data to the terminal,
       it [4mdisables[24m the progress meter as otherwise it would mess up the output
       mixing progress meter and response data.

       If you want a progress meter for HTTP POST or PUT requests, you need to
       redirect the response output to a file, using shell redirect  (>),  [4m-o,[0m
       [4m--output[24m or similar.

       It  is not the same case for FTP upload as that operation does not spit
       out any response data to the terminal.

       If you prefer a progress  "bar"  instead  of  the  regular  meter,  [4m-#,[0m
       [4m--progress-bar[24m  is your friend. You can also disable the progress meter
       completely with the [4m-s,[24m [4m--silent[24m option.

[1mOPTIONS[0m
       Options start with one or two dashes. Many of the  options  require  an
       additional value next to them.

       The  short  "single-dash"  form  of the options, -d for example, may be
       used with or without a space between it and its value, although a space
       is a recommended separator. The long "double-dash" form, [4m-d,[24m [4m--data[24m for
       example, requires a space between it and its value.

       Short version options that don't need any additional values can be used
       immediately  next  to  each other, like for example you can specify all
       the options -O, -L and -v at once as -OLv.

       In general, all boolean options are enabled with --[1moption [22mand yet again
       disabled  with --[1mno-[22moption. That is, you use the exact same option name
       but prefix it with "no-". However, in this list we mostly only list and
       show  the --option version of them. (This concept with --no options was
       added in  7.19.0.  Previously  most  options  were  toggled  on/off  on
       repeated use of the same command line option.)

       --abstract-unix-socket <path>
              (HTTP)  Connect  through an abstract Unix domain socket, instead
              of using the network.   Note:  netstat  shows  the  path  of  an
              abstract  socket  prefixed with '@', however the <path> argument
              should not have this leading character.

              Added in 7.53.0.

       --anyauth
              (HTTP) Tells curl to figure out authentication method by itself,
              and  use  the most secure one the remote site claims to support.
              This is done by first doing a request and checking the response-
              headers,  thus  possibly  inducing  an extra network round-trip.
              This is  used  instead  of  setting  a  specific  authentication
              method,  which  you  can  do with [4m--basic[24m, [4m--digest[24m, [4m--ntlm[24m, and
              [4m--negotiate[24m.

              Using [4m--anyauth[24m is not recommended if you do uploads from stdin,
              since  it  may require data to be sent twice and then the client
              must be able to rewind. If the need should arise when  uploading
              from stdin, the upload operation will fail.

              Used together with [4m-u,[24m [4m--user[24m.

              See also [4m--proxy-anyauth[24m and [4m--basic[24m and [4m--digest[24m.

       -a, --append
              (FTP SFTP) When used in an upload, this makes curl append to the
              target file instead  of  overwriting  it.  If  the  remote  file
              doesn't  exist,  it  will  be  created.   Note that this flag is
              ignored by some SFTP servers (including OpenSSH).

       --basic
              (HTTP) Tells curl to use  HTTP  Basic  authentication  with  the
              remote  host.  This  is  the  default and this option is usually
              pointless, unless you use it to override a previously set option
              that  sets  a  different  authentication method (such as [4m--ntlm[24m,
              [4m--digest[24m, or [4m--negotiate[24m).

              Used together with [4m-u,[24m [4m--user[24m.

              See also [4m--proxy-basic[24m.

       --cacert <file>
              (TLS) Tells curl to use the specified certificate file to verify
              the  peer.  The  file  may contain multiple CA certificates. The
              certificate(s) must be in PEM format. Normally curl is built  to
              use a default file for this, so this option is typically used to
              alter that default file.

              curl recognizes the environment variable named  'CURL_CA_BUNDLE'
              if  it  is  set,  and uses the given path as a path to a CA cert
              bundle. This option overrides that variable.

              The windows version of curl will automatically  look  for  a  CA
              certs file named ¬¥curl-ca-bundle.crt¬¥, either in the same direc‚Äê
              tory as curl.exe, or in the Current Working Directory, or in any
              folder along your PATH.

              If  curl  is  built  against  the  NSS  SSL library, the NSS PEM
              PKCS#11 module (libnsspem.so) needs to  be  available  for  this
              option to work properly.

              (iOS  and macOS only) If curl is built against Secure Transport,
              then this option is supported for  backward  compatibility  with
              other  SSL  engines,  but it should not be set. If the option is
              not set, then curl will use the certificates in the  system  and
              user  Keychain to verify the peer, which is the preferred method
              of verifying the peer's certificate chain.

              If this option is used several times, the last one will be used.

       --capath <dir>
              (TLS) Tells curl to use the specified certificate  directory  to
              verify  the  peer.  Multiple paths can be provided by separating
              them with ":" (e.g.  "path1:path2:path3"). The certificates must
              be  in  PEM  format,  and  if curl is built against OpenSSL, the
              directory must have been processed using  the  c_rehash  utility
              supplied  with OpenSSL. Using [4m--capath[24m can allow OpenSSL-powered
              curl to make SSL-connections much more  efficiently  than  using
              [4m--cacert[24m if the --cacert file contains many CA certificates.

              If this option is set, the default capath value will be ignored,
              and if it is used several times, the last one will be used.

       --cert-status
              (TLS) Tells curl to verify the status of the server  certificate
              by using the Certificate Status Request (aka. OCSP stapling) TLS
              extension.

              If this option is enabled and the server sends an invalid  (e.g.
              expired) response, if the response suggests that the server cer‚Äê
              tificate has been revoked, or no response at  all  is  received,
              the verification fails.

              This  is  currently  only implemented in the OpenSSL, GnuTLS and
              NSS backends.

              Added in 7.41.0.

       --cert-type <type>
              (TLS) Tells curl what certificate type the provided  certificate
              is in. PEM, DER and ENG are recognized types.  If not specified,
              PEM is assumed.

              If this option is used several times, the last one will be used.

              See also [4m-E,[24m [4m--cert[24m and [4m--key[24m and [4m--key-type[24m.

       -E, --cert <certificate[:password]>
              (TLS) Tells curl to use the specified  client  certificate  file
              when getting a file with HTTPS, FTPS or another SSL-based proto‚Äê
              col. The certificate must be in PKCS#12 format if  using  Secure
              Transport,  or  PEM  format  if  using any other engine.  If the
              optional password isn't specified, it will be queried for on the
              terminal.  Note  that  this  option assumes a "certificate" file
              that is the private key and the client certificate concatenated!
              See [4m-E,[24m [4m--cert[24m and [4m--key[24m to specify them independently.

              If  curl  is  built against the NSS SSL library then this option
              can tell curl the nickname of the certificate to use within  the
              NSS  database defined by the environment variable SSL_DIR (or by
              default /etc/pki/nssdb). If the NSS  PEM  PKCS#11  module  (lib‚Äê
              nsspem.so)  is  available  then  PEM files may be loaded. If you
              want to use a file from the current directory, please precede it
              with  "./"  prefix, in order to avoid confusion with a nickname.
              If the nickname contains ":", it needs to be preceded by "\"  so
              that  it  is not recognized as password delimiter.  If the nick‚Äê
              name contains "\", it needs to be escaped as "\\" so that it  is
              not recognized as an escape character.

              If  curl is built against OpenSSL library, and the engine pkcs11
              is available, then a PKCS#11 URI (RFC 7512) can be used to spec‚Äê
              ify  a  certificate located in a PKCS#11 device. A string begin‚Äê
              ning with "pkcs11:" will be interpreted as a PKCS#11 URI.  If  a
              PKCS#11 URI is provided, then the [4m--engine[24m option will be set as
              "pkcs11" if none was provided and the [4m--cert-type[24m option will be
              set as "ENG" if none was provided.

              (iOS  and macOS only) If curl is built against Secure Transport,
              then the certificate string can either be the name of a certifi‚Äê
              cate/private  key in the system or user keychain, or the path to
              a PKCS#12-encoded certificate and private key. If  you  want  to
              use  a  file  from the current directory, please precede it with
              "./" prefix, in order to avoid confusion with a nickname.

              If this option is used several times, the last one will be used.

              See also [4m--cert-type[24m and [4m--key[24m and [4m--key-type[24m.

       --ciphers <list of ciphers>
              (TLS) Specifies which ciphers to use in the connection. The list
              of  ciphers  must  specify  valid ciphers. Read up on SSL cipher
              list details on this URL:

               https://curl.haxx.se/docs/ssl-ciphers.html

              If this option is used several times, the last one will be used.

       --compressed-ssh
              (SCP SFTP) Enables built-in SSH compression.  This is a request,
              not an order; the server may or may not do it.

              Added in 7.56.0.

       --compressed
              (HTTP) Request a compressed response using one of the algorithms
              curl supports, and save  the  uncompressed  document.   If  this
              option  is  used  and  the server sends an unsupported encoding,
              curl will report an error.

       -K, --config <file>

              Specify a text file to read curl  arguments  from.  The  command
              line  arguments  found  in the text file will be used as if they
              were provided on the command line.

              Options and their parameters must be specified on the same  line
              in the file, separated by whitespace, colon, or the equals sign.
              Long option names can optionally be given  in  the  config  file
              without the initial double dashes and if so, the colon or equals
              characters can be used as separators. If the option is specified
              with  one or two dashes, there can be no colon or equals charac‚Äê
              ter between the option and its parameter.

              If the parameter is to contain whitespace, the parameter must be
              enclosed  within  quotes.  Within  double  quotes, the following
              escape sequences are available: \\, \", \t, \n,  \r  and  \v.  A
              backslash  preceding  any  other letter is ignored. If the first
              column of a config line is a '#' character, the rest of the line
              will be treated as a comment. Only write one option per physical
              line in the config file.

              Specify the filename to [4m-K,[24m [4m--config[24m as '-' to  make  curl  read
              the file from stdin.

              Note  that  to  be able to specify a URL in the config file, you
              need to specify it using the [4m--url[24m option,  and  not  by  simply
              writing  the  URL  on its own line. So, it could look similar to
              this:

              url = "https://curl.haxx.se/docs/"

              When curl is invoked, it (unless [4m-q,[24m [4m--disable[24m is  used)  checks
              for a default config file and uses it if found. The default con‚Äê
              fig file is checked for in the following places in this order:

              1) curl tries to find the "home dir": It first  checks  for  the
              CURL_HOME and then the HOME environment variables. Failing that,
              it uses getpwuid() on Unix-like systems (which returns the  home
              dir  given the current user in your system). On Windows, it then
              checks for the APPDATA variable, or as a last resort the '%USER‚Äê
              PROFILE%\Application Data'.

              2)  On  windows, if there is no _curlrc file in the home dir, it
              checks for one in the same dir the curl executable is placed. On
              Unix-like  systems,  it will simply try to load .curlrc from the
              determined home dir.

              # --- Example file ---
              # this is a comment
              url = "example.com"
              output = "curlhere.html"
              user-agent = "superagent/1.0"

              # and fetch another URL too
              url = "example.com/docs/manpage.html"
              -O
              referer = "http://nowhereatall.example.com/"
              # --- End of example file ---

              This option can be used multiple times to load  multiple  config
              files.

       --connect-timeout <seconds>
              Maximum  time  in  seconds  that  you allow curl's connection to
              take.  This only limits the connection phase, so  if  curl  con‚Äê
              nects  within the given period it will continue - if not it will
              exit.  Since version 7.32.0, this option accepts decimal values.

              If this option is used several times, the last one will be used.

              See also [4m-m,[24m [4m--max-time[24m.

       --connect-to <HOST1:PORT1:HOST2:PORT2>

              For  a  request  to  the  given  HOST1:PORT1  pair,  connect  to
              HOST2:PORT2 instead.  This option is suitable to direct requests
              at a specific server, e.g. at a specific cluster node in a clus‚Äê
              ter  of  servers. This option is only used to establish the net‚Äê
              work connection. It does NOT affect the  hostname/port  that  is
              used for TLS/SSL (e.g. SNI, certificate verification) or for the
              application protocols. "HOST1" and  "PORT1"  may  be  the  empty
              string, meaning "any host/port". "HOST2" and "PORT2" may also be
              the  empty  string,  meaning   "use   the   request's   original
              host/port".

              A "host" specified to this option is compared as a string, so it
              needs to match the name used in request URL. It  can  be  either
              numerical  such  as  "127.0.0.1"  or  the full host name such as
              "example.org".

              This option can be used many times to add many connect rules.

              See also [4m--resolve[24m and [4m-H,[24m [4m--header[24m. Added in 7.49.0.

       -C, --continue-at <offset>
              Continue/Resume a previous file transfer at  the  given  offset.
              The  given  offset  is  the  exact  number of bytes that will be
              skipped, counting from the beginning of the source  file  before
              it is transferred to the destination.  If used with uploads, the
              FTP server command SIZE will not be used by curl.

              Use "-C -" to tell curl to automatically find out  where/how  to
              resume  the  transfer. It then uses the given output/input files
              to figure that out.

              If this option is used several times, the last one will be used.

              See also [4m-r,[24m [4m--range[24m.

       -c, --cookie-jar <filename>
              (HTTP) Specify to which file you want curl to write all  cookies
              after  a  completed  operation. Curl writes all cookies from its
              in-memory cookie storage to the given file at the end of  opera‚Äê
              tions.  If  no  cookies  are known, no data will be written. The
              file will be written using the Netscape cookie file  format.  If
              you set the file name to a single dash, "-", the cookies will be
              written to stdout.

              This command line option will activate the  cookie  engine  that
              makes curl record and use cookies. Another way to activate it is
              to use the [4m-b,[24m [4m--cookie[24m option.

              If the cookie jar can't be created or written to, the whole curl
              operation  won't fail or even report an error clearly. Using [4m-v,[0m
              [4m--verbose[24m will get a warning displayed, but  that  is  the  only
              visible feedback you get about this possibly lethal situation.

              If  this  option  is used several times, the last specified file
              name will be used.

       -b, --cookie <data>
              (HTTP) Pass the data to the HTTP server in the Cookie header. It
              is  supposedly the data previously received from the server in a
              "Set-Cookie:"  line.   The  data  should  be   in   the   format
              "NAME1=VALUE1; NAME2=VALUE2".

              If  no '=' symbol is used in the argument, it is instead treated
              as a filename to read previously stored cookie from. This option
              also  activates  the  cookie  engine which will make curl record
              incoming cookies, which may be handy if  you're  using  this  in
              combination  with  the  [4m-L,[24m [4m--location[24m option or do multiple URL
              transfers on the same invoke.

              The file format of the file to read cookies from should be plain
              HTTP  headers  (Set-Cookie style) or the Netscape/Mozilla cookie
              file format.

              The file specified with [4m-b,[24m [4m--cookie[24m is only used as  input.  No
              cookies  will  be written to the file. To store cookies, use the
              [4m-c,[24m [4m--cookie-jar[24m option.

              Exercise caution if you  are  using  this  option  and  multiple
              transfers may occur.  If you use the NAME1=VALUE1; format, or in
              a file use the Set-Cookie format and  don't  specify  a  domain,
              then the cookie is sent for any domain (even after redirects are
              followed) and cannot be modified by a server-set cookie. If  the
              cookie  engine is enabled and a server sets a cookie of the same
              name then both will be sent on a future transfer to that server,
              likely  not  what  you  intended.  To address these issues set a
              domain in Set-Cookie (doing that will include  sub  domains)  or
              use the Netscape format.

              If this option is used several times, the last one will be used.

              Users very often want to both read cookies from a file and write
              updated cookies back to a file, so using both [4m-b,[24m  [4m--cookie[24m  and
              [4m-c,[24m [4m--cookie-jar[24m in the same command line is common.

       --create-dirs
              When used in conjunction with the [4m-o,[24m [4m--output[24m option, curl will
              create the necessary local directory hierarchy as  needed.  This
              option  creates the dirs mentioned with the [4m-o,[24m [4m--output[24m option,
              nothing else. If the --output file name uses no dir  or  if  the
              dirs it mentions already exist, no dir will be created.

              To  create remote directories when using FTP or SFTP, try [4m--ftp-[0m
              [4mcreate-dirs[24m.

       --crlf (FTP SMTP)  Convert  LF  to  CRLF  in  upload.  Useful  for  MVS
              (OS/390).

              (SMTP added in 7.40.0)

       --crlfile <file>
              (TLS) Provide a file using PEM format with a Certificate Revoca‚Äê
              tion List that may specify peer certificates that are to be con‚Äê
              sidered revoked.

              If this option is used several times, the last one will be used.

              Added in 7.19.7.

       --data-ascii <data>
              (HTTP) This is just an alias for [4m-d,[24m [4m--data[24m.

       --data-binary <data>
              (HTTP)  This  posts data exactly as specified with no extra pro‚Äê
              cessing whatsoever.

              If you start the data with the letter @, the rest  should  be  a
              filename.   Data  is  posted  in  a similar manner as [4m-d,[24m [4m--data[0m
              does, except that newlines and carriage  returns  are  preserved
              and conversions are never done.

              If  this  option  is  used several times, the ones following the
              first will append data as described in [4m-d,[24m [4m--data[24m.

       --data-raw <data>
              (HTTP) This posts data similarly to [4m-d,[24m [4m--data[24m but  without  the
              special interpretation of the @ character.

              See also [4m-d,[24m [4m--data[24m. Added in 7.43.0.

       --data-urlencode <data>
              (HTTP)  This posts data, similar to the other [4m-d,[24m [4m--data[24m options
              with the exception that this performs URL-encoding.

              To be CGI-compliant, the <data> part should begin  with  a  [4mname[0m
              followed  by a separator and a content specification. The <data>
              part can be passed to curl using one of the following syntaxes:

              content
                     This will make curl URL-encode the content and pass  that
                     on.  Just  be careful so that the content doesn't contain
                     any = or @ symbols, as that will  then  make  the  syntax
                     match one of the other cases below!

              =content
                     This  will make curl URL-encode the content and pass that
                     on. The preceding = symbol is not included in the data.

              name=content
                     This will make curl URL-encode the content part and  pass
                     that  on.  Note that the name part is expected to be URL-
                     encoded already.

              @filename
                     This will  make  curl  load  data  from  the  given  file
                     (including  any  newlines), URL-encode that data and pass
                     it on in the POST.

              name@filename
                     This will  make  curl  load  data  from  the  given  file
                     (including  any  newlines), URL-encode that data and pass
                     it on in the POST. The  name  part  gets  an  equal  sign
                     appended, resulting in [4mname=urlencoded-file-content[24m. Note
                     that the name is expected to be URL-encoded already.

       See also [4m-d,[24m [4m--data[24m and [4m--data-raw[24m. Added in 7.18.0.

       -d, --data <data>
              (HTTP) Sends the specified data in a POST request  to  the  HTTP
              server,  in  the  same  way  that a browser does when a user has
              filled in an HTML form and presses the submit button. This  will
              cause curl to pass the data to the server using the content-type
              application/x-www-form-urlencoded.  Compare to [4m-F,[24m [4m--form[24m.

              [4m--data-raw[24m is almost the same but does not have a special inter‚Äê
              pretation  of  the  @ character. To post data purely binary, you
              should instead use the [4m--data-binary[24m option.  To URL-encode  the
              value of a form field you may use [4m--data-urlencode[24m.

              If  any of these options is used more than once on the same com‚Äê
              mand line, the data pieces specified  will  be  merged  together
              with  a  separating  &-symbol.  Thus,  using  '-d name=daniel -d
              skill=lousy'  would  generate  a  post  chunk  that  looks  like
              'name=daniel&skill=lousy'.

              If  you  start  the data with the letter @, the rest should be a
              file name to read the data from, or - if you want curl  to  read
              the data from stdin. Multiple files can also be specified. Post‚Äê
              ing data from a file named  from  a  file  like  that,  carriage
              returns and newlines will be stripped out. If you don't want the
              @ character to have  a  special  interpretation  use  [4m--data-raw[0m
              instead.

              See also [4m--data-binary[24m and [4m--data-urlencode[24m and [4m--data-raw[24m. This
              option overrides [4m-F,[24m [4m--form[24m and [4m-I,[24m [4m--head[24m and [4m--upload[24m.

       --delegation <LEVEL>
              (GSS/kerberos) Set LEVEL to tell the server what it  is  allowed
              to delegate when it comes to user credentials.

              none   Don't allow any delegation.

              policy Delegates  if  and only if the OK-AS-DELEGATE flag is set
                     in the Kerberos service ticket,  which  is  a  matter  of
                     realm policy.

              always Unconditionally allow the server to delegate.

       --digest
              (HTTP)  Enables HTTP Digest authentication. This is an authenti‚Äê
              cation scheme that prevents the password from  being  sent  over
              the  wire in clear text. Use this in combination with the normal
              [4m-u,[24m [4m--user[24m option to set user name and password.

              If this option is used several times,  only  the  first  one  is
              used.

              See  also  [4m-u,[24m  [4m--user[24m  and  [4m--proxy-digest[24m  and [4m--anyauth[24m. This
              option overrides [4m--basic[24m and [4m--ntlm[24m and [4m--negotiate[24m.

       --disable-eprt
              (FTP) Tell curl to disable the use of the EPRT and LPRT commands
              when doing active FTP transfers. Curl will normally always first
              attempt to use EPRT, then LPRT before using PORT, but with  this
              option,  it  will  use PORT right away. EPRT and LPRT are exten‚Äê
              sions to the original FTP protocol, and  may  not  work  on  all
              servers, but they enable more functionality in a better way than
              the traditional PORT command.

              --eprt can be used to explicitly enable EPRT again and --no-eprt
              is an alias for [4m--disable-eprt[24m.

              If  the  server is accessed using IPv6, this option will have no
              effect as EPRT is necessary then.

              Disabling EPRT only changes the active behavior. If you want  to
              switch  to  passive  mode  you need to not use [4m-P,[24m [4m--ftp-port[24m or
              force it with [4m--ftp-pasv[24m.

       --disable-epsv
              (FTP) (FTP) Tell curl to disable the use  of  the  EPSV  command
              when  doing  passive  FTP  transfers.  Curl will normally always
              first attempt to use EPSV before PASV, but with this option,  it
              will not try using EPSV.

              --epsv can be used to explicitly enable EPSV again and --no-epsv
              is an alias for [4m--disable-epsv[24m.

              If the server is an IPv6 host, this option will have  no  effect
              as EPSV is necessary then.

              Disabling EPSV only changes the passive behavior. If you want to
              switch to active mode you need to use [4m-P,[24m [4m--ftp-port[24m.

       -q, --disable
              If used as the first parameter on the command line,  the  [4mcurlrc[0m
              config  file will not be read and used. See the [4m-K,[24m [4m--config[24m for
              details on the default config file search path.

       --dns-interface <interface>
              (DNS) Tell curl to send outgoing DNS  requests  through  <inter‚Äê
              face>.  This  option is a counterpart to [4m--interface[24m (which does
              not affect DNS). The supplied string must be an  interface  name
              (not an address).

              See  also  [4m--dns-ipv4-addr[24m  and [4m--dns-ipv6-addr[24m. [4m--dns-interface[0m
              requires that the underlying libcurl was  built  to  support  c-
              ares. Added in 7.33.0.

       --dns-ipv4-addr <address>
              (DNS)  Tell  curl  to  bind to <ip-address> when making IPv4 DNS
              requests, so that the DNS requests originate from this  address.
              The argument should be a single IPv4 address.

              See  also  [4m--dns-interface[24m  and [4m--dns-ipv6-addr[24m. [4m--dns-ipv4-addr[0m
              requires that the underlying libcurl was  built  to  support  c-
              ares. Added in 7.33.0.

       --dns-ipv6-addr <address>
              (DNS)  Tell  curl  to  bind to <ip-address> when making IPv6 DNS
              requests, so that the DNS requests originate from this  address.
              The argument should be a single IPv6 address.

              See  also  [4m--dns-interface[24m  and [4m--dns-ipv4-addr[24m. [4m--dns-ipv6-addr[0m
              requires that the underlying libcurl was  built  to  support  c-
              ares. Added in 7.33.0.

       --dns-servers <addresses>
              Set  the  list  of  DNS servers to be used instead of the system
              default.  The list of IP addresses should be separated with com‚Äê
              mas. Port numbers may also optionally be given as [4m:<port-number>[0m
              after each IP address.

              [4m--dns-servers[24m requires that the underlying libcurl was built  to
              support c-ares. Added in 7.33.0.

       -D, --dump-header <filename>
              (HTTP  FTP) Write the received protocol headers to the specified
              file.

              This option is handy to use when you want to store  the  headers
              that  an  HTTP site sends to you. Cookies from the headers could
              then be read in a  second  curl  invocation  by  using  the  [4m-b,[0m
              [4m--cookie[24m  option! The [4m-c,[24m [4m--cookie-jar[24m option is a better way to
              store cookies.

              When used in FTP, the FTP server response lines  are  considered
              being "headers" and thus are saved there.

              If this option is used several times, the last one will be used.

              See also [4m-o,[24m [4m--output[24m.

       --egd-file <file>
              (TLS)  Specify  the  path  name  to the Entropy Gathering Daemon
              socket. The socket is used to seed the  random  engine  for  SSL
              connections.

              See also [4m--random-file[24m.

       --engine <name>
              (TLS)  Select the OpenSSL crypto engine to use for cipher opera‚Äê
              tions. Use [4m--engine[24m list to print a list of build-time supported
              engines.  Note  that  not  all  (or  none) of the engines may be
              available at run-time.

       --expect100-timeout <seconds>
              (HTTP) Maximum time in seconds that you allow curl to wait for a
              100-continue  response  when curl emits an Expects: 100-continue
              header in its request. By default curl  will  wait  one  second.
              This  option accepts decimal values! When curl stops waiting, it
              will continue as if the response has been received.

              See also [4m--connect-timeout[24m. Added in 7.47.0.

       --fail-early
              Fail and exit on the first detected transfer error.

              When curl is used to do multiple transfers on the command  line,
              it  will  attempt  to  operate on each given URL, one by one. By
              default, it will ignore errors if there are more URLs given  and
              the  last  URL's  success  will  determine  the  error code curl
              returns. So early failures will be "hidden" by  subsequent  suc‚Äê
              cessful transfers.

              Using  this  option,  curl  will  instead return an error on the
              first transfer that fails, independent of  the  amount  of  URLs
              that  are given on the command line. This way, no transfer fail‚Äê
              ures go undetected by scripts and similar.

              This option is global and does not need to be specified for each
              use of [4m-:,[24m [4m--next[24m.

              This option does not imply [4m-f,[24m [4m--fail[24m, which causes transfers to
              fail due to the server's HTTP status code. You can  combine  the
              two options, however note [4m-f,[24m [4m--fail[24m is not global and is there‚Äê
              fore contained by [4m-:,[24m [4m--next[24m.

              Added in 7.52.0.

       -f, --fail
              (HTTP) Fail silently (no output at all) on server  errors.  This
              is  mostly done to better enable scripts etc to better deal with
              failed attempts. In normal cases when an HTTP  server  fails  to
              deliver  a  document,  it  returns  an  HTML document stating so
              (which often also describes why and more). This flag  will  pre‚Äê
              vent curl from outputting that and return error 22.

              This  method is not fail-safe and there are occasions where non-
              successful response codes will  slip  through,  especially  when
              authentication is involved (response codes 401 and 407).

       --false-start
              (TLS)  Tells  curl  to use false start during the TLS handshake.
              False start is a mode where a  TLS  client  will  start  sending
              application data before verifying the server's Finished message,
              thus saving a round trip when performing a full handshake.

              This is currently only implemented in the NSS and Secure  Trans‚Äê
              port (on iOS 7.0 or later, or OS X 10.9 or later) backends.

              Added in 7.42.0.

       --form-string <name=string>
              (HTTP  SMTP  IMAP)  Similar  to [4m-F,[24m [4m--form[24m except that the value
              string for the named parameter is used  literally.  Leading  '@'
              and '<' characters, and the ';type=' string in the value have no
              special meaning. Use this in preference to [4m-F,[24m [4m--form[24m if there's
              any  possibility  that the string value may accidentally trigger
              the '@' or '<' features of [4m-F,[24m [4m--form[24m.

              See also [4m-F,[24m [4m--form[24m.

       -F, --form <name=content>
              (HTTP SMTP IMAP) For HTTP protocol family, this lets  curl  emu‚Äê
              late  a  filled-in  form  in which a user has pressed the submit
              button. This causes curl to POST  data  using  the  Content-Type
              multipart/form-data according to RFC 2388.

              For  SMTP and IMAP protocols, this is the mean to compose a mul‚Äê
              tipart mail message to transmit.

              This enables uploading of binary files etc. To force  the  'con‚Äê
              tent' part to be a file, prefix the file name with an @ sign. To
              just get the content part from a file, prefix the file name with
              the  symbol  <.  The  difference  between @ and < is then that @
              makes a file get attached in the post as a  file  upload,  while
              the < makes a text field and just get the contents for that text
              field from a file.

              Tell curl to read content from stdin instead of a file by  using
              - as filename. This goes for both @ and < constructs. When stdin
              is used, the contents is buffered in memory  first  by  curl  to
              determine  its  size  and  allow  a possible resend.  Defining a
              part's data from a named non-regular file (such as a named  pipe
              or  similar)  is unfortunately not subject to buffering and will
              be effectively read at transmission time; since the full size is
              unknown  before the transfer starts, such data is sent as chunks
              by HTTP and rejected by IMAP.

              Example: send an image to an HTTP server, where 'profile' is the
              name  of  the  form-field to which the file portrait.jpg will be
              the input:

               curl -F profile=@portrait.jpg https://example.com/upload.cgi

              Example: send a your name and shoe size in two  text  fields  to
              the server:

               curl -F name=John -F shoesize=11 https://example.com/

              Example:  send  a your essay in a text field to the server. Send
              it as a plain text field, but get the contents  for  it  from  a
              local file:

               curl -F "story=<hugefile.txt" https://example.com/

              You  can  also  tell  curl  what  Content-Type  to  use by using
              'type=', in a manner similar to:

               curl -F "web=@index.html;type=text/html" example.com

              or

               curl -F "name=daniel;type=text/foo" example.com

              You can also explicitly change the name field of a  file  upload
              part by setting filename=, like this:

               curl -F "file=@localfile;filename=nameinpost" example.com

              If  filename/path contains ',' or ';', it must be quoted by dou‚Äê
              ble-quotes like:

               curl  -F  "file=@\"localfile\";filename=\"nameinpost\""   exam‚Äê
              ple.com

              or

               curl -F 'file=@"localfile";filename="nameinpost"' example.com

              Note  that  if  a  filename/path is quoted by double-quotes, any
              double-quote or backslash within the filename must be escaped by
              backslash.

              Quoting  must  also  be  applied to non-file data if it contains
              semicolons, leading/trailing spaces or leading double quotes:

               curl -F  'colors="red;  green;  blue";type=text/x-myapp'  exam‚Äê
              ple.com

              You  can  add  custom  headers to the field by setting headers=,
              like

                curl -F "submit=OK;headers=\"X-submit-type: OK\"" example.com

              or

                curl -F "submit=OK;headers=@headerfile" example.com

              The headers= keyword may appear more that once and  above  notes
              about  quoting  apply.  When headers are read from a file, Empty
              lines and lines starting with '#' are comments and ignored; each
              header can be folded by splitting between two words and starting
              the continuation line with a  space;  embedded  carriage-returns
              and  trailing  spaces  are  stripped.   Here  is an example of a
              header file contents:

                # This file contain two headers.
                X-header-1: this is a header

                # The following header is folded.
                X-header-2: this is
                 another header

              To support  sending  multipart  mail  messages,  the  syntax  is
              extended as follows:
              -  name can be omitted: the equal sign is the first character of
              the argument,
              - if data starts with '(', this signals to start  a  new  multi‚Äê
              part: it can be followed by a content type specification.
              - a multipart can be terminated with a '=)' argument.

              Example:  the  following  command sends an SMTP mime e-mail con‚Äê
              sisting in an inline part in two alternative formats: plain text
              and HTML. It attaches a text file:

               curl -F '=(;type=multipart/alternative' \
                       -F '=plain text message' \
                       -F '= <body>HTML message</body>;type=text/html' \
                    -F '=)' -F '=@textfile.txt' ...  smtp://example.com

              Data  can  be  encoded  for  transfer  using encoder=. Available
              encodings are [4mbinary[24m and [4m8bit[24m that do nothing else  than  adding
              the  corresponding  Content-Transfer-Encoding  header, [4m7bit[24m that
              only rejects 8-bit characters with  a  transfer  error,  [4mquoted-[0m
              [4mprintable[24m  and  [4mbase64[24m that encodes data according to the corre‚Äê
              sponding schemes, limiting lines length to 76 characters.

              Example: send multipart mail with a quoted-printable  text  mes‚Äê
              sage and a base64 attached file:

               curl -F '=text message;encoder=quoted-printable' \
                    -F '=@localfile;encoder=base64' ... smtp://example.com

              See further examples and details in the MANUAL.

              This option can be used multiple times.

              This option overrides [4m-d,[24m [4m--data[24m and [4m-I,[24m [4m--head[24m and [4m--upload[24m.

       --ftp-account <data>
              (FTP) When an FTP server asks for "account data" after user name
              and password has been provided, this data is sent off using  the
              ACCT command.

              If this option is used several times, the last one will be used.

              Added in 7.13.0.

       --ftp-alternative-to-user <command>
              (FTP)  If  authenticating with the USER and PASS commands fails,
              send this  command.   When  connecting  to  Tumbleweed's  Secure
              Transport  server  over  FTPS  using a client certificate, using
              "SITE AUTH" will tell the server to retrieve the  username  from
              the certificate.

              Added in 7.15.5.

       --ftp-create-dirs
              (FTP  SFTP)  When  an FTP or SFTP URL/operation uses a path that
              doesn't currently exist on the server, the standard behavior  of
              curl is to fail. Using this option, curl will instead attempt to
              create missing directories.

              See also [4m--create-dirs[24m.

       --ftp-method <method>
              (FTP) Control what method curl should use to reach a file on  an
              FTP(S)  server. The method argument should be one of the follow‚Äê
              ing alternatives:

              multicwd
                     curl does a single CWD operation for each  path  part  in
                     the  given URL. For deep hierarchies this means very many
                     commands. This is how RFC 1738 says it  should  be  done.
                     This is the default but the slowest behavior.

              nocwd  curl  does  no  CWD at all. curl will do SIZE, RETR, STOR
                     etc and give a full path to the server for all these com‚Äê
                     mands. This is the fastest behavior.

              singlecwd
                     curl does one CWD with the full target directory and then
                     operates on the file "normally"  (like  in  the  multicwd
                     case).  This  is  somewhat  more standards compliant than
                     'nocwd' but without the full penalty of 'multicwd'.

       Added in 7.15.1.

       --ftp-pasv
              (FTP) Use passive mode for the data connection. Passive  is  the
              internal  default behavior, but using this option can be used to
              override a previous [4m-P,[24m [4m--ftp-port[24m option.

              If this option is used several times,  only  the  first  one  is
              used.  Undoing  an  enforced passive really isn't doable but you
              must then instead enforce the correct [4m-P,[24m [4m--ftp-port[24m again.

              Passive mode means that curl will try the EPSV command first and
              then PASV, unless [4m--disable-epsv[24m is used.

              See also [4m--disable-epsv[24m. Added in 7.11.0.

       -P, --ftp-port <address>
              (FTP)  Reverses  the  default initiator/listener roles when con‚Äê
              necting with FTP. This option makes curl use active  mode.  curl
              then  tells the server to connect back to the client's specified
              address and port, while passive mode asks the server to setup an
              IP  address  and  port for it to connect to. <address> should be
              one of:

              interface
                     i.e "eth0" to specify which interface's  IP  address  you
                     want to use (Unix only)

              IP address
                     i.e "192.168.10.1" to specify the exact IP address

              host name
                     i.e "my.host.domain" to specify the machine

              -      make  curl  pick the same IP address that is already used
                     for the control connection

       If this option is used several times, the last one will be  used.  Dis‚Äê
       able  the  use  of PORT with [4m--ftp-pasv[24m. Disable the attempt to use the
       EPRT command instead of PORT by using [4m--disable-eprt[24m.  EPRT  is  really
       PORT++.

       Since  7.19.5,  you  can  append  ":[start]-[end]"  to the right of the
       address, to tell curl what TCP port range to use. That means you  spec‚Äê
       ify  a  port  range,  from  a lower to a higher number. A single number
       works as well, but do note that it increases the risk of failure  since
       the port may not be available.

       See also [4m--ftp-pasv[24m and [4m--disable-eprt[24m.

       --ftp-pret
              (FTP)  Tell  curl to send a PRET command before PASV (and EPSV).
              Certain FTP servers, mainly drftpd,  require  this  non-standard
              command  for  directory  listings as well as up and downloads in
              PASV mode.

              Added in 7.20.0.

       --ftp-skip-pasv-ip
              (FTP) Tell curl to not use the IP address the server suggests in
              its  response to curl's PASV command when curl connects the data
              connection. Instead curl will re-use  the  same  IP  address  it
              already uses for the control connection.

              This  option has no effect if PORT, EPRT or EPSV is used instead
              of PASV.

              See also [4m--ftp-pasv[24m. Added in 7.14.2.

       --ftp-ssl-ccc-mode <active/passive>
              (FTP) Sets the CCC mode. The passive mode will not initiate  the
              shutdown, but instead wait for the server to do it, and will not
              reply to the shutdown from the server. The active mode initiates
              the shutdown and waits for a reply from the server.

              See also [4m--ftp-ssl-ccc[24m. Added in 7.16.2.

       --ftp-ssl-ccc
              (FTP)  Use  CCC  (Clear  Command Channel) Shuts down the SSL/TLS
              layer after authenticating. The rest of the control channel com‚Äê
              munication  will be unencrypted. This allows NAT routers to fol‚Äê
              low the FTP transaction. The default mode is passive.

              See also [4m--ssl[24m and [4m--ftp-ssl-ccc-mode[24m. Added in 7.16.1.

       --ftp-ssl-control
              (FTP) Require SSL/TLS for the FTP  login,  clear  for  transfer.
              Allows  secure  authentication, but non-encrypted data transfers
              for efficiency.  Fails the transfer if the server  doesn't  sup‚Äê
              port SSL/TLS.

              Added in 7.16.0.

       -G, --get
              When  used,  this  option  will make all data specified with [4m-d,[0m
              [4m--data[24m, [4m--data-binary[24m or [4m--data-urlencode[24m to be used in an  HTTP
              GET  request instead of the POST request that otherwise would be
              used. The data will be appended to the URL with a '?' separator.

              If used in combination with  [4m-I,[24m  [4m--head[24m,  the  POST  data  will
              instead be appended to the URL with a HEAD request.

              If  this  option  is  used  several times, only the first one is
              used. This is because undoing a GET doesn't make sense, but  you
              should then instead enforce the alternative method you prefer.

       -g, --globoff
              This option switches off the "URL globbing parser". When you set
              this option, you can specify URLs that contain the letters  {}[]
              without  having them being interpreted by curl itself. Note that
              these letters are not normal legal URL contents but they  should
              be encoded according to the URI standard.

       --happy-eyeballs-timeout-ms <milliseconds>
              Happy  eyeballs is an algorithm that attempts to connect to both
              IPv4 and IPv6 addresses for dual-stack  hosts,  preferring  IPv6
              first for the number of milliseconds. If the IPv6 address cannot
              be connected to within that time then a  connection  attempt  is
              made to the IPv4 address in parallel. The first connection to be
              established is the one that is used.

              The range of suggested useful values is limited. Happy  Eyeballs
              RFC  6555  says  "It  is RECOMMENDED that connection attempts be
              paced 150-250 ms apart to balance human factors against  network
              load."  libcurl currently defaults to 200 ms. Firefox and Chrome
              currently default to 300 ms.

              If this option is used several times, the last one will be used.

              Added in 7.59.0.

       -I, --head
              (HTTP FTP FILE) Fetch the headers only! HTTP-servers feature the
              command  HEAD which this uses to get nothing but the header of a
              document. When used on an FTP or FILE file,  curl  displays  the
              file size and last modification time only.

       -H, --header <header/@file>
              (HTTP)  Extra header to include in the request when sending HTTP
              to a server. You may specify any number of extra  headers.  Note
              that if you should add a custom header that has the same name as
              one of the internal ones curl would  use,  your  externally  set
              header will be used instead of the internal one. This allows you
              to make even trickier stuff than curl  would  normally  do.  You
              should  not  replace internally set headers without knowing per‚Äê
              fectly well what you're doing. Remove an internal header by giv‚Äê
              ing  a  replacement  without  content  on  the right side of the
              colon, as in: -H "Host:". If you send the custom header with no-
              value  then its header must be terminated with a semicolon, such
              as -H "X-Custom-Header;" to send "X-Custom-Header:".

              curl will make sure that each header  you  add/replace  is  sent
              with the proper end-of-line marker, you should thus [1mnot [22madd that
              as a part of the header content: do not add newlines or carriage
              returns, they will only mess things up for you.

              Starting  in  7.55.0, this option can take an argument in @file‚Äê
              name style, which then adds a header for each line in the  input
              file. Using @- will make curl read the header file from stdin.

              See also the [4m-A,[24m [4m--user-agent[24m and [4m-e,[24m [4m--referer[24m options.

              Starting in 7.37.0, you need [4m--proxy-header[24m to send custom head‚Äê
              ers intended for a proxy.

              Example:

               curl -H "X-First-Name: Joe" http://example.com/

              [1mWARNING[22m: headers set  with  this  option  will  be  set  in  all
              requests  -  even  after  redirects are followed, like when told
              with [4m-L,[24m [4m--location[24m. This can lead to the header being  sent  to
              other  hosts than the original host, so sensitive headers should
              be used with caution combined with following redirects.

              This option can be used  multiple  times  to  add/replace/remove
              multiple headers.

       -h, --help
              Usage  help.  This lists all current command line options with a
              short description.

       --hostpubmd5 <md5>
              (SFTP SCP) Pass a string containing 32 hexadecimal  digits.  The
              string  should  be the 128 bit MD5 checksum of the remote host's
              public key, curl will refuse the connection with the host unless
              the md5sums match.

              Added in 7.17.1.

       -0, --http1.0
              (HTTP)  Tells  curl to use HTTP version 1.0 instead of using its
              internally preferred HTTP version.

              This option overrides [4m--http1.1[24m and [4m--http2[24m.

       --http1.1
              (HTTP) Tells curl to use HTTP version 1.1.

              This option  overrides  [4m-0,[24m  [4m--http1.0[24m  and  [4m--http2[24m.  Added  in
              7.33.0.

       --http2-prior-knowledge
              (HTTP)  Tells  curl  to  issue  its  non-TLS HTTP requests using
              HTTP/2 without HTTP/1.1 Upgrade.  It  requires  prior  knowledge
              that  the  server  supports HTTP/2 straight away. HTTPS requests
              will still do HTTP/2 the standard way with  negotiated  protocol
              version in the TLS handshake.

              [4m--http2-prior-knowledge[24m requires that the underlying libcurl was
              built to support HTTP/2. This option overrides [4m--http1.1[24m and [4m-0,[0m
              [4m--http1.0[24m and [4m--http2[24m. Added in 7.49.0.

       --http2
              (HTTP) Tells curl to use HTTP version 2.

              See also [4m--no-alpn[24m. [4m--http2[24m requires that the underlying libcurl
              was built to support HTTP/2. This option overrides [4m--http1.1[24m and
              [4m-0,[24m [4m--http1.0[24m and [4m--http2-prior-knowledge[24m. Added in 7.33.0.

       --ignore-content-length
              (FTP  HTTP)  For HTTP, Ignore the Content-Length header. This is
              particularly useful for servers running Apache 1.x,  which  will
              report  incorrect  Content-Length  for files larger than 2 giga‚Äê
              bytes.

              For FTP (since 7.46.0), skip the RETR command to figure out  the
              size before downloading a file.

       -i, --include
              Include  the  HTTP  response  headers  in  the  output. The HTTP
              response headers can include things like server  name,  cookies,
              date of the document, HTTP version and more...

              To view the request headers, consider the [4m-v,[24m [4m--verbose[24m option.

              See also [4m-v,[24m [4m--verbose[24m.

       -k, --insecure
              (TLS) By default, every SSL connection curl makes is verified to
              be secure. This option allows curl to proceed and  operate  even
              for server connections otherwise considered insecure.

              The  server  connection  is verified by making sure the server's
              certificate contains the right name  and  verifies  successfully
              using the cert store.

              See this online resource for further details:
               https://curl.haxx.se/docs/sslcerts.html

              See also [4m--proxy-insecure[24m and [4m--cacert[24m.

       --interface <name>

              Perform  an operation using a specified interface. You can enter
              interface name, IP address or host name. An example  could  look
              like:

               curl --interface eth0:1 https://www.example.com/

              If this option is used several times, the last one will be used.

              On  Linux  it can be used to specify a VRF, but the binary needs
              to either have CAP_NET_RAW or to be ran as root.  More  informa‚Äê
              tion   about  Linux  VRF:  https://www.kernel.org/doc/Documenta‚Äê
              tion/networking/vrf.txt

              See also [4m--dns-interface[24m.

       -4, --ipv4
              This option tells curl to resolve names to IPv4 addresses  only,
              and not for example try IPv6.

              See  also  [4m--http1.1[24m  and  [4m--http2[24m.  This  option  overrides [4m-6,[0m
              [4m--ipv6[24m.

       -6, --ipv6
              This option tells curl to resolve names to IPv6 addresses  only,
              and not for example try IPv4.

              See  also  [4m--http1.1[24m  and  [4m--http2[24m.  This  option  overrides [4m-6,[0m
              [4m--ipv6[24m.

       -j, --junk-session-cookies
              (HTTP) When curl is told to read cookies from a given file, this
              option  will  make  it  discard all "session cookies". This will
              basically have the same effect as if a new session  is  started.
              Typical  browsers  always  discard  session cookies when they're
              closed down.

              See also [4m-b,[24m [4m--cookie[24m and [4m-c,[24m [4m--cookie-jar[24m.

       --keepalive-time <seconds>
              This option sets the time a  connection  needs  to  remain  idle
              before  sending keepalive probes and the time between individual
              keepalive probes. It is currently effective on operating systems
              offering  the  TCP_KEEPIDLE  and  TCP_KEEPINTVL  socket  options
              (meaning Linux, recent AIX, HP-UX and more). This option has  no
              effect if [4m--no-keepalive[24m is used.

              If this option is used several times, the last one will be used.
              If unspecified, the option defaults to 60 seconds.

              Added in 7.18.0.

       --key-type <type>
              (TLS) Private key file type. Specify which type your [4m--key[24m  pro‚Äê
              vided  private  key  is. DER, PEM, and ENG are supported. If not
              specified, PEM is assumed.

              If this option is used several times, the last one will be used.

       --key <key>
              (TLS SSH) Private key file name. Allows you to provide your pri‚Äê
              vate  key in this separate file. For SSH, if not specified, curl
              tries the following candidates in order:

              If curl is built against OpenSSL library, and the engine  pkcs11
              is available, then a PKCS#11 URI (RFC 7512) can be used to spec‚Äê
              ify a private key located in a PKCS#11 device. A  string  begin‚Äê
              ning  with  "pkcs11:" will be interpreted as a PKCS#11 URI. If a
              PKCS#11 URI is provided, then the [4m--engine[24m option will be set as
              "pkcs11"  if none was provided and the [4m--key-type[24m option will be
              set as "ENG" if none was provided.

              If this option is used several times, the last one will be used.

       --krb <level>
              (FTP) Enable Kerberos authentication and use. The level must  be
              entered and should be one of 'clear', 'safe', 'confidential', or
              'private'. Should you use a level that  is  not  one  of  these,
              'private' will instead be used.

              If this option is used several times, the last one will be used.

              [4m--krb[24m  requires that the underlying libcurl was built to support
              Kerberos.

       --libcurl <file>
              Append this option to any ordinary curl command  line,  and  you
              will  get a libcurl-using C source code written to the file that
              does the equivalent of what your command-line operation does!

              If this option is used several times, the last given  file  name
              will be used.

              Added in 7.16.1.

       --limit-rate <speed>
              Specify  the  maximum  transfer  rate you want curl to use - for
              both downloads and uploads. This feature is useful if you have a
              limited pipe and you'd like your transfer not to use your entire
              bandwidth. To make it slower than it otherwise would be.

              The given speed is measured in bytes/second, unless a suffix  is
              appended.   Appending  'k' or 'K' will count the number as kilo‚Äê
              bytes, 'm' or 'M' makes it megabytes, while 'g' or 'G' makes  it
              gigabytes. Examples: 200K, 3m and 1G.

              If  you  also use the [4m-Y,[24m [4m--speed-limit[24m option, that option will
              take precedence and might cripple the rate-limiting slightly, to
              help keeping the speed-limit logic working.

              If this option is used several times, the last one will be used.

       -l, --list-only
              (FTP  POP3)  (FTP)  When  listing  an FTP directory, this switch
              forces a name-only view. This is especially useful if  the  user
              wants  to  machine-parse  the contents of an FTP directory since
              the normal directory view doesn't use a standard look or format.
              When used like this, the option causes a NLST command to be sent
              to the server instead of LIST.

              Note: Some FTP servers list only  files  in  their  response  to
              NLST; they do not include sub-directories and symbolic links.

              (POP3)  When  retrieving a specific email from POP3, this switch
              forces a LIST command to be performed instead of RETR.  This  is
              particularly  useful if the user wants to see if a specific mes‚Äê
              sage id exists on the server and what size it is.

              Note: When combined with [4m-X,[24m [4m--request[24m, this option can be  used
              to send an UIDL command instead, so the user may use the email's
              unique identifier rather  than  it's  message  id  to  make  the
              request.

              Added in 7.21.5.

       --local-port <num/range>
              Set  a  preferred single number or range (FROM-TO) of local port
              numbers to use for the connection(s).  Note that port numbers by
              nature  are a scarce resource that will be busy at times so set‚Äê
              ting this range to something too narrow might cause  unnecessary
              connection setup failures.

              Added in 7.15.2.

       --location-trusted
              (HTTP)  Like  [4m-L,[24m  [4m--location[24m, but will allow sending the name +
              password to all hosts that the site may redirect to. This may or
              may not introduce a security breach if the site redirects you to
              a site to which you'll send your authentication info  (which  is
              plaintext in the case of HTTP Basic authentication).

              See also [4m-u,[24m [4m--user[24m.

       -L, --location
              (HTTP)  If  the server reports that the requested page has moved
              to a different location (indicated with a Location: header and a
              3XX  response code), this option will make curl redo the request
              on the new place. If used together with  [4m-i,[24m  [4m--include[24m  or  [4m-I,[0m
              [4m--head[24m,  headers  from  all  requested pages will be shown. When
              authentication is used, curl only sends its credentials  to  the
              initial  host.  If a redirect takes curl to a different host, it
              won't be able to intercept the user+password. See  also  [4m--loca‚Äê[0m
              [4mtion-trusted[24m  on how to change this. You can limit the amount of
              redirects to follow by using the [4m--max-redirs[24m option.

              When curl follows a redirect and the request is not a plain  GET
              (for example POST or PUT), it will do the following request with
              a GET if the HTTP response was 301, 302, or 303. If the response
              code  was  any  other  3xx code, curl will re-send the following
              request using the same unmodified method.

              You can tell curl to not change the non-GET  request  method  to
              GET  after  a  30x  response  by using the dedicated options for
              that: [4m--post301[24m, [4m--post302[24m and [4m--post303[24m.

       --login-options <options>
              (IMAP POP3 SMTP) Specify the login options to use during  server
              authentication.

              You  can  use  the  login  options  to specify protocol specific
              options that may be used during authentication. At present  only
              IMAP,  POP3 and SMTP support login options. For more information
              about the login options please see RFC 2384, RFC 5092  and  IETF
              draft draft-earhart-url-smtp-00.txt

              If this option is used several times, the last one will be used.

              Added in 7.34.0.

       --mail-auth <address>
              (SMTP)  Specify  a  single address. This will be used to specify
              the authentication address (identity)  of  a  submitted  message
              that is being relayed to another server.

              See also [4m--mail-rcpt[24m and [4m--mail-from[24m. Added in 7.25.0.

       --mail-from <address>
              (SMTP)  Specify  a single address that the given mail should get
              sent from.

              See also [4m--mail-rcpt[24m and [4m--mail-auth[24m. Added in 7.20.0.

       --mail-rcpt <address>
              (SMTP) Specify a single address, user name or mailing list name.
              Repeat this option several times to send to multiple recipients.

              When  performing a mail transfer, the recipient should specify a
              valid email address to send the mail to.

              When performing an  address  verification  (VRFY  command),  the
              recipient  should be specified as the user name or user name and
              domain (as per Section 3.5 of RFC5321). (Added in 7.34.0)

              When performing a mailing list expand (EXPN command), the recip‚Äê
              ient  should  be  specified using the mailing list name, such as
              "Friends" or "London-Office".  (Added in 7.34.0)

              Added in 7.20.0.

       -M, --manual
              Manual. Display the huge help text.

       --max-filesize <bytes>
              Specify the maximum size (in bytes) of a file  to  download.  If
              the  file requested is larger than this value, the transfer will
              not start and curl will return with exit code 63.

              A size modifier may be used. For example, Appending 'k'  or  'K'
              will  count  the  number  as  kilobytes,  'm'  or  'M'  makes it
              megabytes, while 'g' or 'G' makes it gigabytes. Examples:  200K,
              3m and 1G. (Added in 7.58.0)

              [1mNOTE:  [22mThe  file size is not always known prior to download, and
              for such files this option has no effect even if the file trans‚Äê
              fer  ends  up  being larger than this given limit. This concerns
              both FTP and HTTP transfers.

              See also [4m--limit-rate[24m.

       --max-redirs <num>
              (HTTP) Set maximum  number  of  redirection-followings  allowed.
              When  [4m-L,[24m  [4m--location[24m is used, is used to prevent curl from fol‚Äê
              lowing redirections "in absurdum". By default, the limit is  set
              to 50 redirections. Set this option to -1 to make it unlimited.

              If this option is used several times, the last one will be used.

       -m, --max-time <time>
              Maximum  time  in  seconds that you allow the whole operation to
              take.  This is useful for preventing your batch jobs from  hang‚Äê
              ing  for  hours due to slow networks or links going down.  Since
              7.32.0, this option accepts decimal values, but the actual time‚Äê
              out will decrease in accuracy as the specified timeout increases
              in decimal precision.

              If this option is used several times, the last one will be used.

              See also [4m--connect-timeout[24m.

       --metalink
              This option can tell curl to parse and process a  given  URI  as
              Metalink  file  (both  version 3 and 4 (RFC 5854) are supported)
              and make use of the mirrors listed within for failover if  there
              are  errors (such as the file or server not being available). It
              will also verify the hash of the file after  the  download  com‚Äê
              pletes.  The Metalink file itself is downloaded and processed in
              memory and not stored in the local file system.

              Example to use a remote Metalink file:

               curl --metalink http://www.example.com/example.metalink

              To use a Metalink file in the local file system, use FILE proto‚Äê
              col (file://):

               curl --metalink file://example.metalink

              Please  note  that if FILE protocol is disabled, there is no way
              to use a local Metalink file at the time of this  writing.  Also
              note  that  if  [4m--metalink[24m  and [4m-i,[24m [4m--include[24m are used together,
              --include will be ignored. This is because including headers  in
              the  response  will break Metalink parser and if the headers are
              included in the file described in Metalink file, hash check will
              fail.

              [4m--metalink[24m  requires  that  the  underlying libcurl was built to
              support metalink. Added in 7.27.0.

       --negotiate
              (HTTP) Enables Negotiate (SPNEGO) authentication.

              This option requires a library built with GSS-API or  SSPI  sup‚Äê
              port.  Use  [4m-V,[24m  [4m--version[24m  to  see  if  your curl supports GSS-
              API/SSPI or SPNEGO.

              When using this option, you must also provide a fake [4m-u,[24m  [4m--user[0m
              option  to  activate the authentication code properly. Sending a
              '-u :' is enough as the user name  and  password  from  the  [4m-u,[0m
              [4m--user[24m option aren't actually used.

              If  this  option  is  used  several times, only the first one is
              used.

              See also [4m--basic[24m and [4m--ntlm[24m and [4m--anyauth[24m and [4m--proxy-negotiate[24m.

       --netrc-file <filename>
              This option is similar to [4m-n,[24m [4m--netrc[24m, except that  you  provide
              the  path  (absolute  or  relative)  to the netrc file that Curl
              should use.  You can only specify one netrc file per invocation.
              If  several [4m--netrc-file[24m options are provided, the last one will
              be used.

              It will abide by [4m--netrc-optional[24m if specified.

              This option overrides [4m-n,[24m [4m--netrc[24m. Added in 7.21.5.

       --netrc-optional
              Very similar to [4m-n,[24m [4m--netrc[24m, but this option  makes  the  .netrc
              usage [1moptional [22mand not mandatory as the [4m-n,[24m [4m--netrc[24m option does.

              See also [4m--netrc-file[24m. This option overrides [4m-n,[24m [4m--netrc[24m.

       -n, --netrc
              Makes  curl  scan  the  [4m.netrc[24m  ([4m_netrc[24m  on Windows) file in the
              user's home directory for login name and password. This is typi‚Äê
              cally  used for FTP on Unix. If used with HTTP, curl will enable
              user authentication. See [4mnetrc(5)[24m [4mftp(1)[24m for details on the file
              format.  Curl  will  not  complain if that file doesn't have the
              right permissions (it should not be either world- or group-read‚Äê
              able).  The environment variable "HOME" is used to find the home
              directory.

              A quick and very simple example of how  to  setup  a  [4m.netrc[24m  to
              allow  curl to FTP to the machine host.domain.com with user name
              'myself' and password 'secret' should look similar to:

              [1mmachine host.domain.com login myself password secret[0m

       -:, --next
              Tells curl to use a separate operation for the following URL and
              associated   options.  This  allows  you  to  send  several  URL
              requests, each with their own  specific  options,  for  example,
              such as different user names or custom requests for each.

              [4m-:,[24m  [4m--next[24m  will  reset  all local options and only global ones
              will have their values survive over to the  operation  following
              the  [4m-:,[24m  [4m--next[24m  instruction. Global options include [4m-v,[24m [4m--ver‚Äê[0m
              [4mbose[24m, [4m--trace[24m, [4m--trace-ascii[24m and [4m--fail-early[24m.

              For example, you can do both a GET and a POST in a  single  com‚Äê
              mand line:

               curl www1.example.com --next -d postthis www2.example.com

              Added in 7.36.0.

       --no-alpn
              (HTTPS)  Disable  the  ALPN  TLS  extension.  ALPN is enabled by
              default if libcurl was built with an SSL library  that  supports
              ALPN.  ALPN is used by a libcurl that supports HTTP/2 to negoti‚Äê
              ate HTTP/2 support with the server during https sessions.

              See also [4m--no-npn[24m  and  [4m--http2[24m.  [4m--no-alpn[24m  requires  that  the
              underlying libcurl was built to support TLS. Added in 7.36.0.

       -N, --no-buffer
              Disables the buffering of the output stream. In normal work sit‚Äê
              uations, curl will use a standard buffered  output  stream  that
              will have the effect that it will output the data in chunks, not
              necessarily exactly when the data arrives.   Using  this  option
              will disable that buffering.

              Note  that  this  is the negated option name documented. You can
              thus use --buffer to enforce the buffering.

       --no-keepalive
              Disables the use of keepalive messages on  the  TCP  connection.
              curl otherwise enables them by default.

              Note  that  this  is the negated option name documented. You can
              thus use --keepalive to enforce keepalive.

       --no-npn
              (HTTPS) Disable the NPN TLS extension. NPN is enabled by default
              if  libcurl was built with an SSL library that supports NPN. NPN
              is used by a libcurl that supports HTTP/2  to  negotiate  HTTP/2
              support with the server during https sessions.

              See  also  [4m--no-alpn[24m  and  [4m--http2[24m.  [4m--no-npn[24m  requires that the
              underlying libcurl was built to support TLS. Added in 7.36.0.

       --no-sessionid
              (TLS) Disable curl's use of SSL session-ID caching.  By  default
              all  transfers are done using the cache. Note that while nothing
              should ever get hurt by attempting  to  reuse  SSL  session-IDs,
              there seem to be broken SSL implementations in the wild that may
              require you to disable this in order for you to succeed.

              Note that this is the negated option name  documented.  You  can
              thus use --sessionid to enforce session-ID caching.

              Added in 7.16.0.

       --noproxy <no-proxy-list>
              Comma-separated  list  of hosts which do not use a proxy, if one
              is specified.  The only wildcard is a single * character,  which
              matches all hosts, and effectively disables the proxy. Each name
              in this list is matched as either a domain  which  contains  the
              hostname,  or  the hostname itself. For example, local.com would
              match  local.com,  local.com:80,  and  www.local.com,  but   not
              www.notlocal.com.

              Since  7.53.0,  This  option overrides the environment variables
              that disable the proxy. If there's an environment variable  dis‚Äê
              abling a proxy, you can set noproxy list to "" to override it.

              Added in 7.19.4.

       --ntlm-wb
              (HTTP) Enables NTLM much in the style [4m--ntlm[24m does, but hand over
              the authentication to the separate binary  ntlmauth  application
              that is executed when needed.

              See also [4m--ntlm[24m and [4m--proxy-ntlm[24m.

       --ntlm (HTTP)  Enables  NTLM  authentication.  The  NTLM authentication
              method was designed by Microsoft and is used by IIS web servers.
              It  is a proprietary protocol, reverse-engineered by clever peo‚Äê
              ple and implemented in curl based on their efforts. This kind of
              behavior  should  not be endorsed, you should encourage everyone
              who uses NTLM to switch to a public and  documented  authentica‚Äê
              tion method instead, such as Digest.

              If  you  want to enable NTLM for your proxy authentication, then
              use [4m--proxy-ntlm[24m.

              If this option is used several times,  only  the  first  one  is
              used.

              See  also  [4m--proxy-ntlm[24m.  [4m--ntlm[24m  requires  that  the underlying
              libcurl was built to support TLS. This option overrides  [4m--basic[0m
              and [4m--negotiated[24m and [4m--digest[24m and [4m--anyauth[24m.

       --oauth2-bearer <token>
              (IMAP  POP3  SMTP) Specify the Bearer Token for OAUTH 2.0 server
              authentication. The Bearer Token is used in conjunction with the
              user  name  which  can  be specified as part of the [4m--url[24m or [4m-u,[0m
              [4m--user[24m options.

              The Bearer Token and user name are formatted  according  to  RFC
              6750.

              If this option is used several times, the last one will be used.

       -o, --output <file>
              Write output to <file> instead of stdout. If you are using {} or
              [] to fetch multiple documents, you can use '#'  followed  by  a
              number  in  the <file> specifier. That variable will be replaced
              with the current string for the URL being fetched. Like in:

               curl http://{one,two}.example.com -o "file_#1.txt"

              or use several variables like:

               curl http://{site,host}.host[1-5].com -o "#1_#2"

              You may use this option as many times as the number of URLs  you
              have.  For  example, if you specify two URLs on the same command
              line, you can use it like this:

                curl -o aa example.com -o bb example.net

              and the order of the -o options and  the  URLs  doesn't  matter,
              just  that  the  first -o is for the first URL and so on, so the
              above command line can also be written as

                curl example.com example.net -o aa -o bb

              See also the [4m--create-dirs[24m option to create the  local  directo‚Äê
              ries  dynamically.  Specifying the output as '-' (a single dash)
              will force the output to be done to stdout.

              See  also  [4m-O,[24m  [4m--remote-name[24m  and  [4m--remote-name-all[24m  and   [4m-J,[0m
              [4m--remote-header-name[24m.

       --pass <phrase>
              (SSH TLS) Passphrase for the private key

              If this option is used several times, the last one will be used.

       --path-as-is
              Tell  curl  to  not handle sequences of /../ or /./ in the given
              URL path. Normally curl will squash or merge them  according  to
              standards but with this option set you tell it not to do that.

              Added in 7.42.0.

       --pinnedpubkey <hashes>
              (TLS)  Tells  curl  to  use  the  specified  public key file (or
              hashes) to verify the peer. This can be a path to a  file  which
              contains a single public key in PEM or DER format, or any number
              of base64 encoded sha256 hashes preceded by ¬¥sha256//¬¥ and sepa‚Äê
              rated by ¬¥;¬¥

              When  negotiating  a  TLS  or SSL connection, the server sends a
              certificate indicating its identity. A public key  is  extracted
              from  this certificate and if it does not exactly match the pub‚Äê
              lic key provided to this option, curl will abort the  connection
              before sending or receiving any data.

              PEM/DER support:
                7.39.0: OpenSSL, GnuTLS and GSKit
                7.43.0: NSS and wolfSSL/CyaSSL
                7.47.0: mbedtls
                7.49.0: PolarSSL sha256 support:
                7.44.0: OpenSSL, GnuTLS, NSS and wolfSSL/CyaSSL.
                7.47.0: mbedtls
                7.49.0: PolarSSL Other SSL backends not supported.

              If this option is used several times, the last one will be used.

       --post301
              (HTTP) Tells curl to respect RFC 7231/6.4.2 and not convert POST
              requests into GET requests when following a 301 redirection. The
              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does
              the conversion by default to maintain  consistency.  However,  a
              server  may  require  a POST to remain a POST after such a redi‚Äê
              rection. This option is meaningful only when using  [4m-L,[24m  [4m--loca‚Äê[0m
              [4mtion[24m.

              See  also  [4m--post302[24m  and [4m--post303[24m and [4m-L,[24m [4m--location[24m. Added in
              7.17.1.

       --post302
              (HTTP) Tells curl to respect RFC 7231/6.4.3 and not convert POST
              requests into GET requests when following a 302 redirection. The
              non-RFC behaviour is ubiquitous in web browsers,  so  curl  does
              the  conversion  by  default to maintain consistency. However, a
              server may require a POST to remain a POST after  such  a  redi‚Äê
              rection.  This  option is meaningful only when using [4m-L,[24m [4m--loca‚Äê[0m
              [4mtion[24m.

              See also [4m--post301[24m and [4m--post303[24m and [4m-L,[24m  [4m--location[24m.  Added  in
              7.19.1.

       --post303
              (HTTP) Tells curl to respect RFC 7231/6.4.4 and not convert POST
              requests into GET requests when following a 303 redirection. The
              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does
              the conversion by default to maintain  consistency.  However,  a
              server  may  require  a POST to remain a POST after such a redi‚Äê
              rection. This option is meaningful only when using  [4m-L,[24m  [4m--loca‚Äê[0m
              [4mtion[24m.

              See  also  [4m--post302[24m  and [4m--post301[24m and [4m-L,[24m [4m--location[24m. Added in
              7.26.0.

       --preproxy [protocol://]host[:port]
              Use the specified SOCKS proxy before connecting to  an  HTTP  or
              HTTPS  [4m-x,[24m  [4m--proxy[24m.  In  such a case curl first connects to the
              SOCKS proxy and then connects (through SOCKS)  to  the  HTTP  or
              HTTPS proxy. Hence pre proxy.

              The pre proxy string should be specified with a protocol:// pre‚Äê
              fix to  specify  alternative  proxy  protocols.  Use  socks4://,
              socks4a://,  socks5://  or  socks5h://  to  request the specific
              SOCKS version to be used. No protocol specified will  make  curl
              default to SOCKS4.

              If  the  port number is not specified in the proxy string, it is
              assumed to be 1080.

              User and password that might be provided in the proxy string are
              URL  decoded by curl. This allows you to pass in special charac‚Äê
              ters such as @ by using %40 or pass in a colon with %3a.

              If this option is used several times, the last one will be used.

              Added in 7.52.0.

       -#, --progress-bar
              Make curl display transfer progress as  a  simple  progress  bar
              instead of the standard, more informational, meter.

              This  progress  bar draws a single line of '#' characters across
              the screen and shows a percentage if the transfer size is known.
              For  transfers  without  a  known size, there will be space ship
              (-=o=-) that moves back and forth but only while data  is  being
              transferred, with a set of flying hash sign symbols on top.

       --proto-default <protocol>
              Tells curl to use [4mprotocol[24m for any URL missing a scheme name.

              Example:

               curl --proto-default https ftp.mozilla.org

              An  unknown  or  unsupported  protocol causes error [4mCURLE_UNSUP‚Äê[0m
              [4mPORTED_PROTOCOL[24m (1).

              This option does not change the default proxy protocol (http).

              Without this option curl would make a guess based on  the  host,
              see [4m--url[24m for details.

              Added in 7.45.0.

       --proto-redir <protocols>
              Tells  curl to limit what protocols it may use on redirect. Pro‚Äê
              tocols denied by [4m--proto[24m are not overridden by this option.  See
              --proto for how protocols are represented.

              Example, allow only HTTP and HTTPS on redirect:

               curl --proto-redir -all,http,https http://example.com

              By default curl will allow all protocols on redirect except sev‚Äê
              eral disabled for security reasons: Since 7.19.4  FILE  and  SCP
              are  disabled,  and since 7.40.0 SMB and SMBS are also disabled.
              Specifying [4mall[24m  or  [4m+all[24m  enables  all  protocols  on  redirect,
              including those disabled for security.

              Added in 7.20.2.

       --proto <protocols>
              Tells  curl  to limit what protocols it may use in the transfer.
              Protocols are evaluated left to right, are comma separated,  and
              are each a protocol name or

              [1m+  [22mPermit this protocol in addition to protocols already permit‚Äê
                 ted (this is the default if no modifier is used).

              [1m-  [22mDeny this protocol, removing it from the  list  of  protocols
                 already permitted.

              [1m=  [22mPermit  only this protocol (ignoring the list already permit‚Äê
                 ted), though subject  to  later  modification  by  subsequent
                 entries in the comma separated list.

              For example:

              [4m--proto[24m [1m-ftps  [22muses the default protocols, but disables ftps

              [4m--proto[24m [1m-all,https,+http[0m
                             only enables http and https

              [4m--proto[24m [1m=http,https[0m
                             also only enables http and https

       Unknown protocols produce a warning. This allows scripts to safely rely
       on being able to disable potentially dangerous protocols, without rely‚Äê
       ing  upon  support  for that protocol being built into curl to avoid an
       error.

       This option can be used multiple times, in which case the effect is the
       same as concatenating the protocols into one instance of the option.

       See also [4m--proto-redir[24m and [4m--proto-default[24m. Added in 7.20.2.

       --proxy-anyauth
              Tells  curl to pick a suitable authentication method when commu‚Äê
              nicating with the given HTTP proxy. This might  cause  an  extra
              request/response round-trip.

              See also [4m-x,[24m [4m--proxy[24m and [4m--proxy-basic[24m and [4m--proxy-digest[24m. Added
              in 7.13.2.

       --proxy-basic
              Tells curl to use HTTP Basic authentication  when  communicating
              with the given proxy. Use [4m--basic[24m for enabling HTTP Basic with a
              remote host. Basic is the  default  authentication  method  curl
              uses with proxies.

              See also [4m-x,[24m [4m--proxy[24m and [4m--proxy-anyauth[24m and [4m--proxy-digest[24m.

       --proxy-cacert <file>
              Same as [4m--cacert[24m but used in HTTPS proxy context.

              See  also  [4m--proxy-capath[24m  and  [4m--cacert[24m  and  [4m--capath[24m  and [4m-x,[0m
              [4m--proxy[24m. Added in 7.52.0.

       --proxy-capath <dir>
              Same as [4m--capath[24m but used in HTTPS proxy context.

              See also [4m--proxy-cacert[24m and [4m-x,[24m [4m--proxy[24m and [4m--capath[24m.  Added  in
              7.52.0.

       --proxy-cert-type <type>
              Same as [4m--cert-type[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-cert <cert[:passwd]>
              Same as [4m-E,[24m [4m--cert[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-ciphers <list>
              Same as [4m--ciphers[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-crlfile <file>
              Same as [4m--crlfile[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-digest
              Tells  curl to use HTTP Digest authentication when communicating
              with the given proxy. Use [4m--digest[24m for enabling HTTP Digest with
              a remote host.

              See also [4m-x,[24m [4m--proxy[24m and [4m--proxy-anyauth[24m and [4m--proxy-basic[24m.

       --proxy-header <header/@file>
              (HTTP)  Extra header to include in the request when sending HTTP
              to a proxy. You may specify any number of extra headers. This is
              the  equivalent option to [4m-H,[24m [4m--header[24m but is for proxy communi‚Äê
              cation only like in CONNECT requests when you  want  a  separate
              header  sent  to  the proxy to what is sent to the actual remote
              host.

              curl will make sure that each header  you  add/replace  is  sent
              with the proper end-of-line marker, you should thus [1mnot [22madd that
              as a part of the header content: do not add newlines or carriage
              returns, they will only mess things up for you.

              Headers  specified  with  this  option  will  not be included in
              requests that curl knows will not be sent to a proxy.

              Starting in 7.55.0, this option can take an argument  in  @file‚Äê
              name  style, which then adds a header for each line in the input
              file. Using @- will make curl read the header file from stdin.

              This option can be used  multiple  times  to  add/replace/remove
              multiple headers.

              Added in 7.37.0.

       --proxy-insecure
              Same as [4m-k,[24m [4m--insecure[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-key-type <type>
              Same as [4m--key-type[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-key <key>
              Same as [4m--key[24m but used in HTTPS proxy context.

       --proxy-negotiate
              Tells  curl  to  use HTTP Negotiate (SPNEGO) authentication when
              communicating with the given proxy. Use [4m--negotiate[24m for enabling
              HTTP Negotiate (SPNEGO) with a remote host.

              See also [4m--proxy-anyauth[24m and [4m--proxy-basic[24m. Added in 7.17.1.

       --proxy-ntlm
              Tells  curl  to  use HTTP NTLM authentication when communicating
              with the given proxy. Use [4m--ntlm[24m for enabling NTLM with a remote
              host.

              See also [4m--proxy-negotiate[24m and [4m--proxy-anyauth[24m.

       --proxy-pass <phrase>
              Same as [4m--pass[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-pinnedpubkey <hashes>
              (TLS)  Tells  curl  to  use  the  specified  public key file (or
              hashes) to verify the proxy. This can be a path to a file  which
              contains a single public key in PEM or DER format, or any number
              of base64 encoded sha256 hashes preceded by ¬¥sha256//¬¥ and sepa‚Äê
              rated by ¬¥;¬¥

              When  negotiating  a  TLS  or SSL connection, the server sends a
              certificate indicating its identity. A public key  is  extracted
              from  this certificate and if it does not exactly match the pub‚Äê
              lic key provided to this option, curl will abort the  connection
              before sending or receiving any data.

              If this option is used several times, the last one will be used.

       --proxy-service-name <name>
              This  option  allows  you  to  change the service name for proxy
              negotiation.

              Added in 7.43.0.

       --proxy-ssl-allow-beast
              Same as [4m--ssl-allow-beast[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlsauthtype <type>
              Same as [4m--tlsauthtype[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlspassword <string>
              Same as [4m--tlspassword[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlsuser <name>
              Same as [4m--tlsuser[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlsv1
              Same as [4m-1,[24m [4m--tlsv1[24m but used in HTTPS proxy context.

              Added in 7.52.0.

       -U, --proxy-user <user:password>
              Specify the user name and password to use for proxy  authentica‚Äê
              tion.

              If  you  use  a  Windows  SSPI-enabled curl binary and do either
              Negotiate or NTLM authentication  then  you  can  tell  curl  to
              select the user name and password from your environment by spec‚Äê
              ifying a single colon with this option: "-U :".

              If this option is used several times, the last one will be used.

       -x, --proxy [protocol://]host[:port]
              Use the specified proxy.

              The proxy string can be specified with a protocol:// prefix.  No
              protocol specified or http:// will be treated as HTTP proxy. Use
              socks4://, socks4a://, socks5:// or socks5h:// to request a spe‚Äê
              cific SOCKS version to be used.  (The protocol support was added
              in curl 7.21.7)

              HTTPS proxy support via https:// protocol prefix  was  added  in
              7.52.0 for OpenSSL, GnuTLS and NSS.

              Unrecognized  and  unsupported  proxy  protocols  cause an error
              since 7.52.0.  Prior versions may ignore the  protocol  and  use
              http:// instead.

              If  the  port number is not specified in the proxy string, it is
              assumed to be 1080.

              This option overrides existing environment  variables  that  set
              the  proxy  to use. If there's an environment variable setting a
              proxy, you can set proxy to "" to override it.

              All operations that are performed over an HTTP proxy will trans‚Äê
              parently  be  converted  to HTTP. It means that certain protocol
              specific operations might not be available. This is not the case
              if you can tunnel through the proxy, as one with the [4m-p,[24m [4m--prox‚Äê[0m
              [4mytunnel[24m option.

              User and password that might be provided in the proxy string are
              URL  decoded by curl. This allows you to pass in special charac‚Äê
              ters such as @ by using %40 or pass in a colon with %3a.

              The proxy host can be specified the exact same way as the  proxy
              environment  variables,  including the protocol prefix (http://)
              and the embedded user + password.

              If this option is used several times, the last one will be used.

       --proxy1.0 <host[:port]>
              Use the specified HTTP 1.0 proxy. If  the  port  number  is  not
              specified, it is assumed at port 1080.

              The  only  difference between this and the HTTP proxy option [4m-x,[0m
              [4m--proxy[24m, is that attempts to use CONNECT through the proxy  will
              specify an HTTP 1.0 protocol instead of the default HTTP 1.1.

       -p, --proxytunnel
              When  an  HTTP proxy is used [4m-x,[24m [4m--proxy[24m, this option will cause
              non-HTTP protocols  to  attempt  to  tunnel  through  the  proxy
              instead  of merely using it to do HTTP-like operations. The tun‚Äê
              nel approach is made with the HTTP  proxy  CONNECT  request  and
              requires that the proxy allows direct connect to the remote port
              number curl wants to tunnel through to.

              To suppress proxy CONNECT response headers when curl is  set  to
              output headers use [4m--suppress-connect-headers[24m.

              See also [4m-x,[24m [4m--proxy[24m.

       --pubkey <key>
              (SFTP SCP) Public key file name. Allows you to provide your pub‚Äê
              lic key in this separate file.

              If this option is used several times, the last one will be used.

              (As of 7.39.0, curl attempts to automatically extract the public
              key  from the private key file, so passing this option is gener‚Äê
              ally not required. Note that this public key extraction requires
              libcurl  to  be linked against a copy of libssh2 1.2.8 or higher
              that is itself linked against OpenSSL.)

       -Q, --quote
              (FTP SFTP) Send an arbitrary command to the remote FTP  or  SFTP
              server.  Quote commands are sent BEFORE the transfer takes place
              (just after the initial PWD command in an FTP  transfer,  to  be
              exact). To make commands take place after a successful transfer,
              prefix them with a dash '-'.  To make  commands  be  sent  after
              curl has changed the working directory, just before the transfer
              command(s), prefix the command with a '+'  (this  is  only  sup‚Äê
              ported for FTP). You may specify any number of commands.

              If  the  server  returns  failure  for  one of the commands, the
              entire operation will be aborted. You  must  send  syntactically
              correct  FTP  commands as RFC 959 defines to FTP servers, or one
              of the commands listed below to SFTP servers.

              This option can be used multiple times. When speaking to an  FTP
              server,  prefix  the  command  with an asterisk (*) to make curl
              continue even if the command fails as by default curl will  stop
              at first failure.

              SFTP  is a binary protocol. Unlike for FTP, curl interprets SFTP
              quote commands itself before sending them to the  server.   File
              names may be quoted shell-style to embed spaces or special char‚Äê
              acters.  Following is the list of all supported SFTP quote  com‚Äê
              mands:

              chgrp group file
                     The  chgrp command sets the group ID of the file named by
                     the file operand to the group ID specified by  the  group
                     operand. The group operand is a decimal integer group ID.

              chmod mode file
                     The  chmod  command  modifies  the  file mode bits of the
                     specified file. The mode operand is an octal integer mode
                     number.

              chown user file
                     The chown command sets the owner of the file named by the
                     file operand to the user ID specified by the  user  oper‚Äê
                     and. The user operand is a decimal integer user ID.

              ln source_file target_file
                     The ln and symlink commands create a symbolic link at the
                     target_file location pointing to  the  source_file  loca‚Äê
                     tion.

              mkdir directory_name
                     The  mkdir  command  creates  the  directory named by the
                     directory_name operand.

              pwd    The pwd command returns the absolute pathname of the cur‚Äê
                     rent working directory.

              rename source target
                     The rename command renames the file or directory named by
                     the source operand to the destination path named  by  the
                     target operand.

              rm file
                     The rm command removes the file specified by the file op‚Äê
                     erand.

              rmdir directory
                     The rmdir command removes the directory  entry  specified
                     by the directory operand, provided it is empty.

              symlink source_file target_file
                     See ln.

       --random-file <file>
              Specify the path name to file containing what will be considered
              as random data. The data may be used to seed the  random  engine
              for SSL connections.  See also the [4m--egd-file[24m option.

       -r, --range <range>
              (HTTP  FTP SFTP FILE) Retrieve a byte range (i.e a partial docu‚Äê
              ment) from a HTTP/1.1, FTP or  SFTP  server  or  a  local  FILE.
              Ranges can be specified in a number of ways.

              [1m0-499     [22mspecifies the first 500 bytes

              [1m500-999   [22mspecifies the second 500 bytes

              [1m-500      [22mspecifies the last 500 bytes

              [1m9500-     [22mspecifies the bytes from offset 9500 and forward

              [1m0-0,-1    [22mspecifies the first and last byte only(*)(HTTP)

              [1m100-199,500-599[0m
                        specifies two separate 100-byte ranges(*) (HTTP)

              (*)  = NOTE that this will cause the server to reply with a mul‚Äê
              tipart response!

              Only digit characters (0-9) are valid in the 'start' and  'stop'
              fields  of the 'start-stop' range syntax. If a non-digit charac‚Äê
              ter is given in the range, the server's response will be unspec‚Äê
              ified, depending on the server's configuration.

              You  should also be aware that many HTTP/1.1 servers do not have
              this feature enabled, so that when you attempt to get  a  range,
              you'll instead get the whole document.

              FTP  and  SFTP  range  downloads only support the simple 'start-
              stop' syntax (optionally with one of the numbers  omitted).  FTP
              use depends on the extended FTP command SIZE.

              If this option is used several times, the last one will be used.

       --raw  (HTTP) When used, it disables all internal HTTP decoding of con‚Äê
              tent or transfer encodings and  instead  makes  them  passed  on
              unaltered, raw.

              Added in 7.16.2.

       -e, --referer <URL>
              (HTTP) Sends the "Referrer Page" information to the HTTP server.
              This can also be set with the [4m-H,[24m [4m--header[24m flag of course.  When
              used  with  [4m-L,[24m  [4m--location[24m  you  can  append ";auto" to the [4m-e,[0m
              [4m--referer[24m URL to make curl automatically set  the  previous  URL
              when  it  follows  a Location: header. The ";auto" string can be
              used alone, even if you don't set an initial [4m-e,[24m [4m--referer[24m.

              If this option is used several times, the last one will be used.

              See also [4m-A,[24m [4m--user-agent[24m and [4m-H,[24m [4m--header[24m.

       -J, --remote-header-name
              (HTTP) This option tells the [4m-O,[24m [4m--remote-name[24m option to use the
              server-specified   Content-Disposition   filename   instead   of
              extracting a filename from the URL.

              If the server specifies a file name and a file  with  that  name
              already  exists  in the current working directory it will not be
              overwritten and an error will occur. If the server doesn't spec‚Äê
              ify a file name then this option has no effect.

              There's  no  attempt to decode %-sequences (yet) in the provided
              file name, so this option may provide you with rather unexpected
              file names.

              [1mWARNING[22m:  Exercise  judicious  use of this option, especially on
              Windows. A rogue server could send you the  name  of  a  DLL  or
              other  file  that could possibly be loaded automatically by Win‚Äê
              dows or some third party software.

       --remote-name-all
              This option changes the default action for all given URLs to  be
              dealt with as if [4m-O,[24m [4m--remote-name[24m were used for each one. So if
              you want to disable that for a specific URL after [4m--remote-name-[0m
              [4mall[24m has been used, you must use "-o -" or --no-remote-name.

              Added in 7.19.0.

       -O, --remote-name
              Write  output to a local file named like the remote file we get.
              (Only the file part of the remote file is used, the path is  cut
              off.)

              The  file will be saved in the current working directory. If you
              want the file saved in a  different  directory,  make  sure  you
              change  the  current working directory before invoking curl with
              this option.

              The remote file name to use for saving  is  extracted  from  the
              given  URL,  nothing  else,  and if it already exists it will be
              overwritten. If you want the server to be  able  to  choose  the
              file name refer to [4m-J,[24m [4m--remote-header-name[24m which can be used in
              addition to this option. If the server chooses a file  name  and
              that name already exists it will not be overwritten.

              There is no URL decoding done on the file name. If it has %20 or
              other URL encoded parts of the name, they will end up  as-is  as
              file name.

              You  may use this option as many times as the number of URLs you
              have.

       -R, --remote-time
              When used, this will make curl attempt to figure out  the  time‚Äê
              stamp  of  the  remote  file,  and if that is available make the
              local file get that same timestamp.

       --request-target
              (HTTP) Tells curl to use an alternative "target" (path)  instead
              of  using  the  path as provided in the URL. Particularly useful
              when wanting to issue HTTP requests  without  leading  slash  or
              other  data  that  doesn't  follow the regular URL pattern, like
              "OPTIONS *".

              Added in 7.55.0.

       -X, --request <command>
              (HTTP) Specifies a custom request method to use when communicat‚Äê
              ing  with the HTTP server.  The specified request method will be
              used instead of the method otherwise  used  (which  defaults  to
              GET).  Read  the HTTP 1.1 specification for details and explana‚Äê
              tions. Common additional HTTP requests include PUT  and  DELETE,
              but related technologies like WebDAV offers PROPFIND, COPY, MOVE
              and more.

              Normally you don't need this option. All  sorts  of  GET,  HEAD,
              POST and PUT requests are rather invoked by using dedicated com‚Äê
              mand line options.

              This option only changes  the  actual  word  used  in  the  HTTP
              request,  it does not alter the way curl behaves. So for example
              if you want to make a proper HEAD request, using  -X  HEAD  will
              not suffice. You need to use the [4m-I,[24m [4m--head[24m option.

              The  method  string  you set with [4m-X,[24m [4m--request[24m will be used for
              all requests, which if you for example use  [4m-L,[24m  [4m--location[24m  may
              cause  unintended  side-effects when curl doesn't change request
              method according to the HTTP 30x response codes - and similar.

              (FTP) Specifies a custom FTP command to use instead of LIST when
              doing file lists with FTP.

              (POP3) Specifies a custom POP3 command to use instead of LIST or
              RETR. (Added in 7.26.0)

              (IMAP) Specifies a custom IMAP command to use instead  of  LIST.
              (Added in 7.30.0)

              (SMTP) Specifies a custom SMTP command to use instead of HELP or
              VRFY. (Added in 7.34.0)

              If this option is used several times, the last one will be used.

       --resolve <host:port:address[,address]...>
              Provide a custom address for a  specific  host  and  port  pair.
              Using  this,  you  can make the curl requests(s) use a specified
              address and prevent the otherwise normally resolved  address  to
              be  used.  Consider it a sort of /etc/hosts alternative provided
              on the command line. The port number should be the  number  used
              for  the  specific  protocol the host will be used for. It means
              you need several entries if you want to provide address for  the
              same host but different ports.

              The provided address set by this option will be used even if [4m-4,[0m
              [4m--ipv4[24m or [4m-6,[24m [4m--ipv6[24m is set to make curl use another IP version.

              Support for providing the IP address within [brackets] was added
              in 7.57.0.

              Support  for providing multiple IP addresses per entry was added
              in 7.59.0.

              This option can be used many times to add  many  host  names  to
              resolve.

              Added in 7.21.3.

       --retry-connrefused
              In  addition to the other conditions, consider ECONNREFUSED as a
              transient error too for [4m--retry[24m. This option  is  used  together
              with --retry.

              Added in 7.52.0.

       --retry-delay <seconds>
              Make  curl  sleep  this  amount of time before each retry when a
              transfer has failed with  a  transient  error  (it  changes  the
              default  backoff time algorithm between retries). This option is
              only interesting if [4m--retry[24m is also used. Setting this delay  to
              zero will make curl use the default backoff time.

              If this option is used several times, the last one will be used.

              Added in 7.12.3.

       --retry-max-time <seconds>
              The  retry  timer  is  reset  before the first transfer attempt.
              Retries will be done as usual (see [4m--retry[24m) as long as the timer
              hasn't reached this given limit. Notice that if the timer hasn't
              reached the limit, the request will be made and  while  perform‚Äê
              ing,  it may take longer than this given time period. To limit a
              single request¬¥s maximum time, use  [4m-m,[24m  [4m--max-time[24m.   Set  this
              option to zero to not timeout retries.

              If this option is used several times, the last one will be used.

              Added in 7.12.3.

       --retry <num>
              If  a  transient  error is returned when curl tries to perform a
              transfer, it will retry this number of times before  giving  up.
              Setting  the  number to 0 makes curl do no retries (which is the
              default). Transient error means either: a timeout,  an  FTP  4xx
              response code or an HTTP 5xx response code.

              When  curl  is about to retry a transfer, it will first wait one
              second and then for all forthcoming retries it will  double  the
              waiting  time until it reaches 10 minutes which then will be the
              delay between the rest of the retries.  By  using  [4m--retry-delay[0m
              you   disable  this  exponential  backoff  algorithm.  See  also
              [4m--retry-max-time[24m to limit the total time allowed for retries.

              If this option is used several times, the last one will be used.

              Added in 7.12.3.

       --sasl-ir
              Enable initial response in SASL authentication.

              Added in 7.31.0.

       --service-name <name>
              This option allows you to change the service name for SPNEGO.

              Examples:   [4m--negotiate[24m   [4m--service-name[24m   sockd    would    use
              sockd/server-name.

              Added in 7.43.0.

       -S, --show-error
              When used with [4m-s,[24m [4m--silent[24m, it makes curl show an error message
              if it fails.

       -s, --silent
              Silent or quiet mode. Don't show progress meter  or  error  mes‚Äê
              sages.   Makes  Curl mute. It will still output the data you ask
              for, potentially even to the terminal/stdout unless you redirect
              it.

              Use  [4m-S,[24m  [4m--show-error[24m  in  addition  to  this option to disable
              progress meter but still show error messages.

              See also [4m-v,[24m [4m--verbose[24m and [4m--stderr[24m.

       --socks4 <host[:port]>
              Use the specified SOCKS4 proxy. If the port number is not speci‚Äê
              fied, it is assumed at port 1080.

              This  option  overrides any previous use of [4m-x,[24m [4m--proxy[24m, as they
              are mutually exclusive.

              Since 7.21.7, this option is superfluous since you can specify a
              socks4 proxy with [4m-x,[24m [4m--proxy[24m using a socks4:// protocol prefix.

              Since 7.52.0, [4m--preproxy[24m can be used to specify a SOCKS proxy at
              the same time [4m-x,[24m [4m--proxy[24m is used with an HTTP/HTTPS  proxy.  In
              such a case curl first connects to the SOCKS proxy and then con‚Äê
              nects (through SOCKS) to the HTTP or HTTPS proxy.

              If this option is used several times, the last one will be used.

              Added in 7.15.2.

       --socks4a <host[:port]>
              Use the specified SOCKS4a proxy. If the port number is not spec‚Äê
              ified, it is assumed at port 1080.

              This  option  overrides any previous use of [4m-x,[24m [4m--proxy[24m, as they
              are mutually exclusive.

              Since 7.21.7, this option is superfluous since you can specify a
              socks4a  proxy with [4m-x,[24m [4m--proxy[24m using a socks4a:// protocol pre‚Äê
              fix.

              Since 7.52.0, [4m--preproxy[24m can be used to specify a SOCKS proxy at
              the  same  time [4m-x,[24m [4m--proxy[24m is used with an HTTP/HTTPS proxy. In
              such a case curl first connects to the SOCKS proxy and then con‚Äê
              nects (through SOCKS) to the HTTP or HTTPS proxy.

              If this option is used several times, the last one will be used.

              Added in 7.18.0.

       --socks5-basic
              Tells curl to use username/password authentication when connect‚Äê
              ing to a SOCKS5 proxy.  The username/password authentication  is
              enabled  by  default.   Use  [4m--socks5-gssapi[24m  to  force  GSS-API
              authentication to SOCKS5 proxies.

              Added in 7.55.0.

       --socks5-gssapi-nec
              As part of the GSS-API negotiation a protection mode is  negoti‚Äê
              ated.  RFC  1961 says in section 4.3/4.4 it should be protected,
              but the NEC  reference  implementation  does  not.   The  option
              [4m--socks5-gssapi-nec[24m  allows the unprotected exchange of the pro‚Äê
              tection mode negotiation.

              Added in 7.19.4.

       --socks5-gssapi-service <name>
              The default service name for a socks server is rcmd/server-fqdn.
              This option allows you to change it.

              Examples:   [4m--socks5[24m  proxy-name  [4m--socks5-gssapi-service[24m  sockd
              would use sockd/proxy-name [4m--socks5[24m proxy-name  [4m--socks5-gssapi-[0m
              [4mservice[24m  sockd/real-name  would  use  sockd/real-name  for cases
              where the proxy-name does not match the principal name.

              Added in 7.19.4.

       --socks5-gssapi
              Tells curl to use GSS-API authentication when  connecting  to  a
              SOCKS5  proxy.  The GSS-API authentication is enabled by default
              (if curl is compiled with GSS-API support).  Use  [4m--socks5-basic[0m
              to force username/password authentication to SOCKS5 proxies.

              Added in 7.55.0.

       --socks5-hostname <host[:port]>
              Use  the  specified  SOCKS5 proxy (and let the proxy resolve the
              host name). If the port number is not specified, it  is  assumed
              at port 1080.

              This  option  overrides any previous use of [4m-x,[24m [4m--proxy[24m, as they
              are mutually exclusive.

              Since 7.21.7, this option is superfluous since you can specify a
              socks5 hostname proxy with [4m-x,[24m [4m--proxy[24m using a socks5h:// proto‚Äê
              col prefix.

              Since 7.52.0, [4m--preproxy[24m can be used to specify a SOCKS proxy at
              the  same  time [4m-x,[24m [4m--proxy[24m is used with an HTTP/HTTPS proxy. In
              such a case curl first connects to the SOCKS proxy and then con‚Äê
              nects (through SOCKS) to the HTTP or HTTPS proxy.

              If this option is used several times, the last one will be used.

              Added in 7.18.0.

       --socks5 <host[:port]>
              Use  the  specified  SOCKS5  proxy  -  but resolve the host name
              locally. If the port number is not specified, it is  assumed  at
              port 1080.

              This  option  overrides any previous use of [4m-x,[24m [4m--proxy[24m, as they
              are mutually exclusive.

              Since 7.21.7, this option is superfluous since you can specify a
              socks5 proxy with [4m-x,[24m [4m--proxy[24m using a socks5:// protocol prefix.

              Since 7.52.0, [4m--preproxy[24m can be used to specify a SOCKS proxy at
              the same time [4m-x,[24m [4m--proxy[24m is used with an HTTP/HTTPS  proxy.  In
              such a case curl first connects to the SOCKS proxy and then con‚Äê
              nects (through SOCKS) to the HTTP or HTTPS proxy.

              If this option is used several times, the last one will be used.

              This option (as well as [4m--socks4[24m) does not work with IPV6,  FTPS
              or LDAP.

              Added in 7.18.0.

       -Y, --speed-limit <speed>
              If a download is slower than this given speed (in bytes per sec‚Äê
              ond) for speed-time seconds it gets aborted. speed-time  is  set
              with [4m-y,[24m [4m--speed-time[24m and is 30 if not set.

              If this option is used several times, the last one will be used.

       -y, --speed-time <seconds>
              If a download is slower than speed-limit bytes per second during
              a speed-time period, the download gets aborted. If speed-time is
              used,  the  default  speed-limit  will  be 1 unless set with [4m-Y,[0m
              [4m--speed-limit[24m.

              This option controls transfers and thus  will  not  affect  slow
              connects  etc.  If this is a concern for you, try the [4m--connect-[0m
              [4mtimeout[24m option.

              If this option is used several times, the last one will be used.

       --ssl-allow-beast
              This option tells curl to not work around a security flaw in the
              SSL3  and TLS1.0 protocols known as BEAST.  If this option isn't
              used, the SSL layer may use workarounds known to cause  interop‚Äê
              erability problems with some older SSL implementations. WARNING:
              this option loosens the SSL security, and by using this flag you
              ask for exactly that.

              Added in 7.25.0.

       --ssl-no-revoke
              (WinSSL)  This  option tells curl to disable certificate revoca‚Äê
              tion checks.  WARNING: this option loosens the SSL security, and
              by using this flag you ask for exactly that.

              Added in 7.44.0.

       --ssl-reqd
              (FTP IMAP POP3 SMTP) Require SSL/TLS for the connection.  Termi‚Äê
              nates the connection if the server doesn't support SSL/TLS.

              This option was formerly known as --ftp-ssl-reqd.

              Added in 7.20.0.

       --ssl  (FTP IMAP POP3 SMTP) Try to  use  SSL/TLS  for  the  connection.
              Reverts to a non-secure connection if the server doesn't support
              SSL/TLS.  See also [4m--ftp-ssl-control[24m and [4m--ssl-reqd[24m for  differ‚Äê
              ent levels of encryption required.

              This  option  was formerly known as --ftp-ssl (Added in 7.11.0).
              That option name can still be used but  will  be  removed  in  a
              future version.

              Added in 7.20.0.

       -2, --sslv2
              (SSL)  Forces  curl to use SSL version 2 when negotiating with a
              remote SSL server. Sometimes curl is built  without  SSLv2  sup‚Äê
              port. SSLv2 is widely considered insecure (see RFC 6176).

              See  also  [4m--http1.1[24m  and [4m--http2[24m. [4m-2,[24m [4m--sslv2[24m requires that the
              underlying libcurl was built to support TLS. This  option  over‚Äê
              rides [4m-3,[24m [4m--sslv3[24m and [4m-1,[24m [4m--tlsv1[24m and [4m--tlsv1.1[24m and [4m--tlsv1.2[24m.

       -3, --sslv3
              (SSL)  Forces  curl to use SSL version 3 when negotiating with a
              remote SSL server. Sometimes curl is built  without  SSLv3  sup‚Äê
              port. SSLv3 is widely considered insecure (see RFC 7568).

              See  also  [4m--http1.1[24m  and [4m--http2[24m. [4m-3,[24m [4m--sslv3[24m requires that the
              underlying libcurl was built to support TLS. This  option  over‚Äê
              rides [4m-2,[24m [4m--sslv2[24m and [4m-1,[24m [4m--tlsv1[24m and [4m--tlsv1.1[24m and [4m--tlsv1.2[24m.

       --stderr
              Redirect  all writes to stderr to the specified file instead. If
              the file name is a plain '-', it is instead written to stdout.

              If this option is used several times, the last one will be used.

              See also [4m-v,[24m [4m--verbose[24m and [4m-s,[24m [4m--silent[24m.

       --suppress-connect-headers
              When [4m-p,[24m [4m--proxytunnel[24m is used and a  CONNECT  request  is  made
              don't  output  proxy  CONNECT  response  headers. This option is
              meant to be used with [4m-D,[24m [4m--dump-header[24m or [4m-i,[24m  [4m--include[24m  which
              are  used  to  show  protocol  headers  in the output. It has no
              effect on debug options such as [4m-v,[24m [4m--verbose[24m or [4m--trace[24m, or any
              statistics.

              See also [4m-D,[24m [4m--dump-header[24m and [4m-i,[24m [4m--include[24m and [4m-p,[24m [4m--proxytun‚Äê[0m
              [4mnel[24m.

       --tcp-fastopen
              Enable use of TCP Fast Open (RFC7413).

              Added in 7.49.0.

       --tcp-nodelay
              Turn on the TCP_NODELAY option. See the [4mcurl_easy_setopt(3)[24m  man
              page for details about this option.

              Since  7.50.2,  curl sets this option by default and you need to
              explicitly switch it off if you don't want it on.

              Added in 7.11.2.

       -t, --telnet-option <opt=val>
              Pass options to the telnet protocol. Supported options are:

              TTYPE=<term> Sets the terminal type.

              XDISPLOC=<X display> Sets the X display location.

              NEW_ENV=<var,val> Sets an environment variable.

       --tftp-blksize <value>
              (TFTP) Set TFTP BLKSIZE option (must be >512). This is the block
              size that curl will try to use when transferring data to or from
              a TFTP server. By default 512 bytes will be used.

              If this option is used several times, the last one will be used.

              Added in 7.20.0.

       --tftp-no-options
              (TFTP) Tells curl not to send TFTP options requests.

              This option improves interop with some legacy  servers  that  do
              not  acknowledge  or  properly implement TFTP options. When this
              option is used [4m--tftp-blksize[24m is ignored.

              Added in 7.48.0.

       -z, --time-cond <time>
              (HTTP FTP) Request a file that has been modified later than  the
              given  time  and date, or one that has been modified before that
              time. The <date expression> can be all sorts of date strings  or
              if it doesn't match any internal ones, it is taken as a filename
              and tries to get  the  modification  date  (mtime)  from  <file>
              instead.  See  the [4mcurl_getdate(3)[24m man pages for date expression
              details.

              Start the date expression with a dash (-) to make it request for
              a  document that is older than the given date/time, default is a
              document that is newer than the specified date/time.

              If this option is used several times, the last one will be used.

       --tls-max <VERSION>
              (SSL) VERSION defines maximum supported TLS version.  A  minimum
              is defined by arguments tlsv1.0 or tlsv1.1 or tlsv1.2.

              default
                     Use up to recommended TLS version.

              1.0    Use up to TLSv1.0.

              1.1    Use up to TLSv1.1.

              1.2    Use up to TLSv1.2.

              1.3    Use up to TLSv1.3.

       See also [4m--tlsv1.0[24m and [4m--tlsv1.1[24m and [4m--tlsv1.2[24m. [4m--tls-max[24m requires that
       the underlying libcurl was built to support TLS. Added in 7.54.0.

       --tlsauthtype <type>
              Set TLS  authentication  type.  Currently,  the  only  supported
              option  is  "SRP",  for  TLS-SRP  (RFC  5054).  If [4m--tlsuser[24m and
              [4m--tlspassword[24m are specified but [4m--tlsauthtype[24m is not, then  this
              option  defaults to "SRP".  This option works only if the under‚Äê
              lying libcurl is built  with  TLS-SRP  support,  which  requires
              OpenSSL or GnuTLS with TLS-SRP support.

              Added in 7.21.4.

       --tlspassword
              Set  password  for use with the TLS authentication method speci‚Äê
              fied with [4m--tlsauthtype[24m. Requires that [4m--tlsuser[24m also be set.

              Added in 7.21.4.

       --tlsuser <name>
              Set username for use with the TLS authentication  method  speci‚Äê
              fied  with  [4m--tlsauthtype[24m.  Requires  that [4m--tlspassword[24m also is
              set.

              Added in 7.21.4.

       --tlsv1.0
              (TLS) Forces curl to use TLS version 1.0 when  connecting  to  a
              remote TLS server.

              Added in 7.34.0.

       --tlsv1.1
              (TLS)  Forces  curl  to use TLS version 1.1 when connecting to a
              remote TLS server.

              Added in 7.34.0.

       --tlsv1.2
              (TLS) Forces curl to use TLS version 1.2 when  connecting  to  a
              remote TLS server.

              Added in 7.34.0.

       --tlsv1.3
              (TLS)  Forces  curl  to use TLS version 1.3 when connecting to a
              remote TLS server.

              Note that TLS 1.3 is only supported by a subset of TLS backends.
              At the time of this writing, they are BoringSSL, NSS, and Secure
              Transport (on iOS 11 or later, and macOS 10.13 or later).

              Added in 7.52.0.

       -1, --tlsv1
              (SSL) Tells curl to use TLS version 1.x when negotiating with  a
              remote TLS server. That means TLS version 1.0, 1.1 or 1.2.

              See  also  [4m--http1.1[24m  and [4m--http2[24m. [4m-1,[24m [4m--tlsv1[24m requires that the
              underlying libcurl was built to support TLS. This  option  over‚Äê
              rides [4m--tlsv1.1[24m and [4m--tlsv1.2[24m and [4m--tlsv1.3[24m.

       --tr-encoding
              (HTTP) Request a compressed Transfer-Encoding response using one
              of the algorithms curl supports, and uncompress the  data  while
              receiving it.

              Added in 7.21.6.

       --trace-ascii <file>
              Enables  a  full  trace  dump of all incoming and outgoing data,
              including descriptive information, to the given output file. Use
              "-" as filename to have the output sent to stdout.

              This is very similar to [4m--trace[24m, but leaves out the hex part and
              only shows the ASCII part of the dump. It makes  smaller  output
              that might be easier to read for untrained humans.

              If this option is used several times, the last one will be used.

              This option overrides [4m--trace[24m and [4m-v,[24m [4m--verbose[24m.

       --trace-time
              Prepends  a  time  stamp to each trace or verbose line that curl
              displays.

              Added in 7.14.0.

       --trace <file>
              Enables a full trace dump of all  incoming  and  outgoing  data,
              including descriptive information, to the given output file. Use
              "-" as filename to have the output sent to stdout.  Use  "%"  as
              filename to have the output sent to stderr.

              If this option is used several times, the last one will be used.

              This option overrides [4m-v,[24m [4m--verbose[24m and [4m--trace-ascii[24m.

       --unix-socket <path>
              (HTTP) Connect through this Unix domain socket, instead of using
              the network.

              Added in 7.40.0.

       -T, --upload-file <file>
              This transfers the specified local file to the  remote  URL.  If
              there is no file part in the specified URL, curl will append the
              local file name. NOTE that you must use a trailing / on the last
              directory  to really prove to Curl that there is no file name or
              curl will think that your last directory name is the remote file
              name to use. That will most likely cause the upload operation to
              fail. If this is used on an HTTP(S) server, the PUT command will
              be used.

              Use  the file name "-" (a single dash) to use stdin instead of a
              given file.  Alternately, the file name "."  (a  single  period)
              may  be  specified  instead  of "-" to use stdin in non-blocking
              mode to  allow  reading  server  output  while  stdin  is  being
              uploaded.

              You  can  specify one [4m-T,[24m [4m--upload-file[24m for each URL on the com‚Äê
              mand line. Each [4m-T,[24m [4m--upload-file[24m + URL pair specifies  what  to
              upload  and  to  where. curl also supports "globbing" of the [4m-T,[0m
              [4m--upload-file[24m argument, meaning that  you  can  upload  multiple
              files  to a single URL by using the same URL globbing style sup‚Äê
              ported in the URL, like this:

               curl --upload-file "{file1,file2}" http://www.example.com

              or even

               curl -T "img[1-1000].png" ftp://ftp.example.com/upload/

              When uploading to an SMTP server: the uploaded data  is  assumed
              to be RFC 5322 formatted. It has to feature the necessary set of
              headers and mail body formatted correctly by the  user  as  curl
              will not transcode nor encode it further in any way.

       --url <url>
              Specify  a  URL  to  fetch. This option is mostly handy when you
              want to specify URL(s) in a config file.

              If the given URL is missing a scheme name (such as "http://"  or
              "ftp://"  etc) then curl will make a guess based on the host. If
              the outermost sub-domain name matches  DICT,  FTP,  IMAP,  LDAP,
              POP3  or  SMTP  then  that protocol will be used, otherwise HTTP
              will be used. Since 7.45.0 guessing can be disabled by setting a
              default protocol, see [4m--proto-default[24m for details.

              This  option  may  be used any number of times. To control where
              this URL is written, use the [4m-o,[24m [4m--output[24m or the  [4m-O,[24m  [4m--remote-[0m
              [4mname[24m options.

       -B, --use-ascii
              (FTP  LDAP)  Enable  ASCII  transfer.  For FTP, this can also be
              enforced by using a URL that ends with  ";type=A".  This  option
              causes data sent to stdout to be in text mode for win32 systems.

       -A, --user-agent <name>
              (HTTP) Specify the User-Agent string to send to the HTTP server.
              To encode blanks in the string, surround the string with  single
              quote  marks.  This can also be set with the [4m-H,[24m [4m--header[24m option
              of course.

              If this option is used several times, the last one will be used.

       -u, --user <user:password>
              Specify the user name and password to use for server authentica‚Äê
              tion. Overrides [4m-n,[24m [4m--netrc[24m and [4m--netrc-optional[24m.

              If  you  simply  specify  the  user name, curl will prompt for a
              password.

              The user name and passwords are split up  on  the  first  colon,
              which  makes  it impossible to use a colon in the user name with
              this option. The password can, still.

              When using Kerberos V5 with a Windows based  server  you  should
              include  the  Windows domain name in the user name, in order for
              the server to successfully obtain  a  Kerberos  Ticket.  If  you
              don't then the initial authentication handshake may fail.

              When  using  NTLM,  the user name can be specified simply as the
              user name, without the domain, if there is a single  domain  and
              forest in your setup for example.

              To  specify  the domain name use either Down-Level Logon Name or
              UPN (User Principal Name) formats. For example, EXAMPLE\user and
              user@example.com respectively.

              If  you  use a Windows SSPI-enabled curl binary and perform Ker‚Äê
              beros V5, Negotiate, NTLM or Digest authentication then you  can
              tell  curl  to select the user name and password from your envi‚Äê
              ronment by specifying a single colon with this option: "-u :".

              If this option is used several times, the last one will be used.

       -v, --verbose
              Makes curl verbose during the operation.  Useful  for  debugging
              and  seeing  what's  going  on "under the hood". A line starting
              with '>' means "header data" sent by  curl,  '<'  means  "header
              data"  received  by  curl  that is hidden in normal cases, and a
              line starting with '*' means additional info provided by curl.

              If you only want HTTP headers in the output, [4m-i,[24m [4m--include[24m might
              be the option you're looking for.

              If  you think this option still doesn't give you enough details,
              consider using [4m--trace[24m or [4m--trace-ascii[24m instead.

              Use [4m-s,[24m [4m--silent[24m to make curl really quiet.

              See also  [4m-i,[24m  [4m--include[24m.  This  option  overrides  [4m--trace[24m  and
              [4m--trace-ascii[24m.

       -V, --version
              Displays information about curl and the libcurl version it uses.

              The  first  line  includes the full version of curl, libcurl and
              other 3rd party libraries linked with the executable.

              The second line (starts with "Protocols:") shows  all  protocols
              that libcurl reports to support.

              The third line (starts with "Features:") shows specific features
              libcurl reports to offer. Available features include:

              IPv6   You can use IPv6 with this.

              krb4   Krb4 for FTP is supported.

              SSL    SSL versions of various protocols are supported, such  as
                     HTTPS, FTPS, POP3S and so on.

              libz   Automatic  decompression of compressed files over HTTP is
                     supported.

              NTLM   NTLM authentication is supported.

              Debug  This curl uses a libcurl built with Debug.  This  enables
                     more  error-tracking  and memory debugging etc. For curl-
                     developers only!

              AsynchDNS
                     This curl uses asynchronous name  resolves.  Asynchronous
                     name  resolves can be done using either the c-ares or the
                     threaded resolver backends.

              SPNEGO SPNEGO authentication is supported.

              Largefile
                     This curl supports transfers of large files, files larger
                     than 2GB.

              IDN    This curl supports IDN - international domain names.

              GSS-API
                     GSS-API is supported.

              SSPI   SSPI is supported.

              TLS-SRP
                     SRP  (Secure Remote Password) authentication is supported
                     for TLS.

              HTTP2  HTTP/2 support has been built-in.

              UnixSockets
                     Unix sockets support is provided.

              HTTPS-proxy
                     This curl is built to support HTTPS proxy.

              Metalink
                     This curl supports Metalink (both version 3  and  4  (RFC
                     5854)),  which  describes  mirrors and hashes.  curl will
                     use mirrors for failover if there are errors (such as the
                     file or server not being available).

              PSL    PSL  is  short for Public Suffix List and means that this
                     curl has been built with  knowledge  about  "public  suf‚Äê
                     fixes".

       -w, --write-out <format>
              Make curl display information on stdout after a completed trans‚Äê
              fer. The format is a string that may contain  plain  text  mixed
              with  any  number of variables. The format can be specified as a
              literal "string", or you can have curl read the  format  from  a
              file  with  "@filename" and to tell curl to read the format from
              stdin you write "@-".

              The variables present in the output format will  be  substituted
              by  the  value or text that curl thinks fit, as described below.
              All variables are specified as %{variable_name} and to output  a
              normal  % you just write them as %%. You can output a newline by
              using \n, a carriage return with \r and a tab space with \t.

              [1mNOTE: [22mThe %-symbol is a special symbol in the win32-environment,
              where  all  occurrences  of  %  must  be doubled when using this
              option.

              The variables available are:

              [1mcontent_type   [22mThe Content-Type of the  requested  document,  if
                             there was any.

              [1mfilename_effective[0m
                             The  ultimate  filename  that curl writes out to.
                             This is only meaningful if curl is told to  write
                             to  a  file  with  the  [4m-O,[24m  [4m--remote-name[24m or [4m-o,[0m
                             [4m--output[24m option. It's most useful in  combination
                             with  the [4m-J,[24m [4m--remote-header-name[24m option. (Added
                             in 7.26.0)

              [1mftp_entry_path [22mThe initial path curl ended up in when logging on
                             to the remote FTP server. (Added in 7.15.4)

              [1mhttp_code      [22mThe numerical response code that was found in the
                             last retrieved HTTP(S)  or  FTP(s)  transfer.  In
                             7.18.2  the alias [1mresponse_code [22mwas added to show
                             the same info.

              [1mhttp_connect   [22mThe numerical code that was  found  in  the  last
                             response   (from  a  proxy)  to  a  curl  CONNECT
                             request. (Added in 7.12.4)

              [1mhttp_version   [22mThe  http  version  that  was  effectively  used.
                             (Added in 7.50.0)

              [1mlocal_ip       [22mThe  IP  address  of  the  local  end of the most
                             recently done connection - can be either IPv4  or
                             IPv6 (Added in 7.29.0)

              [1mlocal_port     [22mThe  local  port number of the most recently done
                             connection (Added in 7.29.0)

              [1mnum_connects   [22mNumber of new connects made in the recent  trans‚Äê
                             fer. (Added in 7.12.3)

              [1mnum_redirects  [22mNumber  of  redirects  that  were followed in the
                             request. (Added in 7.12.3)

              [1mproxy_ssl_verify_result[0m
                             The result of the HTTPS proxy's SSL peer certifi‚Äê
                             cate verification that was requested. 0 means the
                             verification was successful. (Added in 7.52.0)

              [1mredirect_url   [22mWhen an HTTP request was made without [4m-L,[24m [4m--loca‚Äê[0m
                             [4mtion[24m  to follow redirects (or when --max-redir is
                             met), this variable will show the  actual  URL  a
                             redirect [4mwould[24m have gone to. (Added in 7.18.2)

              [1mremote_ip      [22mThe  remote  IP address of the most recently done
                             connection - can be either IPv4 or IPv6 (Added in
                             7.29.0)

              [1mremote_port    [22mThe  remote port number of the most recently done
                             connection (Added in 7.29.0)

              [1mscheme         [22mThe URL scheme (sometimes called  protocol)  that
                             was effectively used (Added in 7.52.0)

              [1msize_download  [22mThe total amount of bytes that were downloaded.

              [1msize_header    [22mThe total amount of bytes of the downloaded head‚Äê
                             ers.

              [1msize_request   [22mThe total amount of bytes that were sent  in  the
                             HTTP request.

              [1msize_upload    [22mThe total amount of bytes that were uploaded.

              [1mspeed_download [22mThe average download speed that curl measured for
                             the complete download. Bytes per second.

              [1mspeed_upload   [22mThe average upload speed that curl  measured  for
                             the complete upload. Bytes per second.

              [1mssl_verify_result[0m
                             The  result of the SSL peer certificate verifica‚Äê
                             tion that was requested. 0 means the verification
                             was successful. (Added in 7.19.0)

              [1mtime_appconnect[0m
                             The  time,  in  seconds,  it  took from the start
                             until the SSL/SSH/etc  connect/handshake  to  the
                             remote host was completed. (Added in 7.19.0)

              [1mtime_connect   [22mThe  time,  in  seconds,  it  took from the start
                             until the TCP connect  to  the  remote  host  (or
                             proxy) was completed.

              [1mtime_namelookup[0m
                             The  time,  in  seconds,  it  took from the start
                             until the name resolving was completed.

              [1mtime_pretransfer[0m
                             The time, in seconds,  it  took  from  the  start
                             until  the file transfer was just about to begin.
                             This includes all pre-transfer commands and nego‚Äê
                             tiations that are specific to the particular pro‚Äê
                             tocol(s) involved.

              [1mtime_redirect  [22mThe time, in seconds, it took for all redirection
                             steps including name lookup, connect, pretransfer
                             and transfer before  the  final  transaction  was
                             started.  time_redirect shows the complete execu‚Äê
                             tion time for multiple  redirections.  (Added  in
                             7.12.3)

              [1mtime_starttransfer[0m
                             The  time,  in  seconds,  it  took from the start
                             until the first byte was just about to be  trans‚Äê
                             ferred.  This  includes time_pretransfer and also
                             the time  the  server  needed  to  calculate  the
                             result.

              [1mtime_total     [22mThe  total time, in seconds, that the full opera‚Äê
                             tion lasted.

              [1murl_effective  [22mThe URL that was fetched last. This is most mean‚Äê
                             ingful  if  you've  told curl to follow location:
                             headers.

              If this option is used several times, the last one will be used.

       --xattr
              When saving output to a file, this option tells  curl  to  store
              certain  file  metadata  in extended file attributes. Currently,
              the URL is stored in the xdg.origin.url attribute and, for HTTP,
              the  content  type  is stored in the mime_type attribute. If the
              file system does not support extended attributes, a  warning  is
              issued.

[1mFILES[0m
       [4m~/.curlrc[0m
              Default config file, see [4m-K,[24m [4m--config[24m for details.

[1mENVIRONMENT[0m
       The environment variables can be specified in lower case or upper case.
       The lower case version has precedence. http_proxy is an exception as it
       is only available in lower case.

       Using  an  environment variable to set the proxy has the same effect as
       using the [4m-x,[24m [4m--proxy[24m option.

       http_proxy [protocol://]<host>[:port]
              Sets the proxy server to use for HTTP.

       HTTPS_PROXY [protocol://]<host>[:port]
              Sets the proxy server to use for HTTPS.

       [url-protocol]_PROXY [protocol://]<host>[:port]
              Sets the proxy server to use for [url-protocol], where the  pro‚Äê
              tocol  is  a  protocol  that curl supports and as specified in a
              URL. FTP, FTPS, POP3, IMAP, SMTP, LDAP etc.

       ALL_PROXY [protocol://]<host>[:port]
              Sets the proxy server to use if no  protocol-specific  proxy  is
              set.

       NO_PROXY <comma-separated list of hosts>
              list  of  host names that shouldn't go through any proxy. If set
              to a asterisk '*' only, it matches all hosts.

              This environment variable disables use of the  proxy  even  when
              specified    with    the    [4m-x,[24m    [4m--proxy[24m   option.   That   is
              [1mNO_PROXY=direct.example.com  curl  -x   http://proxy.example.com[0m
              [1mhttp://direct.example.com  [22maccesses the target URL directly, and
              [1mNO_PROXY=direct.example.com  curl  -x   http://proxy.example.com[0m
              [1mhttp://somewhere.example.com [22maccesses the target URL through the
              proxy.

              The list  of  host  names  can  also  be  include  numerical  IP
              addresses,  and  IPv6  versions  should  then  be  given without
              enclosing brackets.

[1mPROXY PROTOCOL PREFIXES[0m
       Since curl version 7.21.7, the proxy string may  be  specified  with  a
       protocol:// prefix to specify alternative proxy protocols.

       If  no  protocol  is  specified  in  the  proxy string or if the string
       doesn't match a supported one, the proxy will be  treated  as  an  HTTP
       proxy.

       The supported proxy protocol prefixes are as follows:

       http://
              Makes it use it as a HTTP proxy. The default if no scheme prefix
              is used.

       https://
              Makes it treated as a [1mHTTPS [22mproxy.

       socks4://
              Makes it the equivalent of [4m--socks4[0m

       socks4a://
              Makes it the equivalent of [4m--socks4a[0m

       socks5://
              Makes it the equivalent of [4m--socks5[0m

       socks5h://
              Makes it the equivalent of [4m--socks5-hostname[0m

[1mEXIT CODES[0m
       There are a bunch of different  error  codes  and  their  corresponding
       error  messages  that  may appear during bad conditions. At the time of
       this writing, the exit codes are:

       1      Unsupported protocol. This build of curl has no support for this
              protocol.

       2      Failed to initialize.

       3      URL malformed. The syntax was not correct.

       4      A  feature  or  option  that  was  needed to perform the desired
              request was not enabled or was  explicitly  disabled  at  build-
              time.  To  make  curl able to do this, you probably need another
              build of libcurl!

       5      Couldn't resolve proxy.  The  given  proxy  host  could  not  be
              resolved.

       6      Couldn't resolve host. The given remote host was not resolved.

       7      Failed to connect to host.

       8      Weird server reply. The server sent data curl couldn't parse.

       9      FTP  access  denied. The server denied login or denied access to
              the particular resource or directory you wanted to  reach.  Most
              often  you  tried to change to a directory that doesn't exist on
              the server.

       10     FTP accept failed. While waiting for the server to connect  back
              when  an active FTP session is used, an error code was sent over
              the control connection or similar.

       11     FTP weird PASS reply. Curl couldn't parse the reply sent to  the
              PASS request.

       12     During  an  active  FTP  session while waiting for the server to
              connect back to curl, the timeout expired.

       13     FTP weird PASV reply, Curl couldn't parse the reply sent to  the
              PASV request.

       14     FTP  weird  227  format.  Curl  couldn't  parse the 227-line the
              server sent.

       15     FTP can't get host. Couldn't resolve the host IP we got  in  the
              227-line.

       16     HTTP/2 error. A problem was detected in the HTTP2 framing layer.
              This is somewhat generic and can be one out of several problems,
              see the error message for details.

       17     FTP  couldn't  set  binary.  Couldn't  change transfer method to
              binary.

       18     Partial file. Only a part of the file was transferred.

       19     FTP couldn't download/access the given file, the RETR (or  simi‚Äê
              lar) command failed.

       21     FTP quote error. A quote command returned error from the server.

       22     HTTP  page  not  retrieved.  The  requested url was not found or
              returned another error with the HTTP error  code  being  400  or
              above. This return code only appears if [4m-f,[24m [4m--fail[24m is used.

       23     Write  error.  Curl couldn't write data to a local filesystem or
              similar.

       25     FTP couldn't STOR file. The server denied  the  STOR  operation,
              used for FTP uploading.

       26     Read error. Various reading problems.

       27     Out of memory. A memory allocation request failed.

       28     Operation  timeout.  The  specified  time-out period was reached
              according to the conditions.

       30     FTP PORT failed. The PORT command failed. Not  all  FTP  servers
              support  the  PORT  command,  try  doing  a  transfer using PASV
              instead!

       31     FTP couldn't use REST. The REST command failed. This command  is
              used for resumed FTP transfers.

       33     HTTP range error. The range "command" didn't work.

       34     HTTP post error. Internal post-request generation error.

       35     SSL connect error. The SSL handshaking failed.

       36     Bad  download resume. Couldn't continue an earlier aborted down‚Äê
              load.

       37     FILE couldn't read file. Failed to open the file. Permissions?

       38     LDAP cannot bind. LDAP bind operation failed.

       39     LDAP search failed.

       41     Function not found. A required LDAP function was not found.

       42     Aborted by callback. An application told curl to abort the oper‚Äê
              ation.

       43     Internal error. A function was called with a bad parameter.

       45     Interface  error.  A  specified  outgoing interface could not be
              used.

       47     Too many redirects. When following redirects, curl hit the maxi‚Äê
              mum amount.

       48     Unknown  option  specified  to  libcurl. This indicates that you
              passed a weird option to curl that was passed on to libcurl  and
              rejected. Read up in the manual!

       49     Malformed telnet option.

       51     The peer's SSL certificate or SSH MD5 fingerprint was not OK.

       52     The  server  didn't  reply anything, which here is considered an
              error.

       53     SSL crypto engine not found.

       54     Cannot set SSL crypto engine as default.

       55     Failed sending network data.

       56     Failure in receiving network data.

       58     Problem with the local certificate.

       59     Couldn't use specified SSL cipher.

       60     Peer certificate cannot be authenticated with known CA  certifi‚Äê
              cates.

       61     Unrecognized transfer encoding.

       62     Invalid LDAP URL.

       63     Maximum file size exceeded.

       64     Requested FTP SSL level failed.

       65     Sending the data requires a rewind that failed.

       66     Failed to initialise SSL Engine.

       67     The  user  name,  password, or similar was not accepted and curl
              failed to log in.

       68     File not found on TFTP server.

       69     Permission problem on TFTP server.

       70     Out of disk space on TFTP server.

       71     Illegal TFTP operation.

       72     Unknown TFTP transfer ID.

       73     File already exists (TFTP).

       74     No such user (TFTP).

       75     Character conversion failed.

       76     Character conversion functions required.

       77     Problem with reading the SSL CA cert (path? access rights?).

       78     The resource referenced in the URL does not exist.

       79     An unspecified error occurred during the SSH session.

       80     Failed to shut down the SSL connection.

       82     Could not load CRL file,  missing  or  wrong  format  (added  in
              7.19.0).

       83     Issuer check failed (added in 7.19.0).

       84     The FTP PRET command failed

       85     RTSP: mismatch of CSeq numbers

       86     RTSP: mismatch of Session Identifiers

       87     unable to parse FTP file list

       88     FTP chunk callback reported error

       89     No connection available, the session will be queued

       90     SSL public key does not matched pinned public key

       91     Invalid SSL certificate status.

       92     Stream error in HTTP/2 framing layer.

       XX     More error codes will appear here in future releases. The exist‚Äê
              ing ones are meant to never change.

[1mAUTHORS / CONTRIBUTORS[0m
       Daniel Stenberg is the main author, but the whole list of  contributors
       is found in the separate THANKS file.

[1mWWW[0m
       https://curl.haxx.se

[1mSEE ALSO[0m
       [1mftp[22m(1), [1mwget[22m(1)

Curl 7.52.0                       16 Dec 2016                          curl(1)
